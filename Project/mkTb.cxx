/*
 * Generated by Bluespec Compiler, version 2024.07 (build b4f31dbe)
 * 
 * On Sat Oct 12 18:08:16 IST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("%d  MAC O/P =  %b", 17u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_count(simHdl, "count", this, 32u, 1u, (tUInt8)0u),
    INST_mac(simHdl, "mac", this),
    INST_rg_a(simHdl, "rg_a", this, 16u, 19459u, (tUInt8)0u),
    INST_rg_b(simHdl, "rg_b", this, 16u, 20464u, (tUInt8)0u),
    INST_rg_c(simHdl, "rg_c", this, 32u, 1368349737u, (tUInt8)0u),
    INST_rg_s1_or_s2(simHdl, "rg_s1_or_s2", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 16u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h269", SYM_DEF, &DEF_b__h269, 32u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_inp", SYM_DEF, &DEF_CAN_FIRE_RL_inp, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_res", SYM_DEF, &DEF_CAN_FIRE_RL_res, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_stall", SYM_DEF, &DEF_CAN_FIRE_RL_stall, 1u);
  init_symbol(&symbols[4u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[5u], "mac", SYM_MODULE, &INST_mac);
  init_symbol(&symbols[6u], "RL_inp", SYM_RULE);
  init_symbol(&symbols[7u], "RL_res", SYM_RULE);
  init_symbol(&symbols[8u], "RL_stall", SYM_RULE);
  init_symbol(&symbols[9u], "rg_a", SYM_MODULE, &INST_rg_a);
  init_symbol(&symbols[10u], "rg_b", SYM_MODULE, &INST_rg_b);
  init_symbol(&symbols[11u], "rg_c", SYM_MODULE, &INST_rg_c);
  init_symbol(&symbols[12u], "rg_s1_or_s2", SYM_MODULE, &INST_rg_s1_or_s2);
  init_symbol(&symbols[13u], "WILL_FIRE_RL_inp", SYM_DEF, &DEF_WILL_FIRE_RL_inp, 1u);
  init_symbol(&symbols[14u], "WILL_FIRE_RL_res", SYM_DEF, &DEF_WILL_FIRE_RL_res, 1u);
  init_symbol(&symbols[15u], "WILL_FIRE_RL_stall", SYM_DEF, &DEF_WILL_FIRE_RL_stall, 1u);
}


/* Rule actions */

void MOD_mkTb::RL_inp()
{
  tUInt8 DEF_s1_or_s0__h294;
  tUInt32 DEF_a__h291;
  tUInt32 DEF_b__h292;
  tUInt32 DEF_c__h293;
  DEF_b__h269 = INST_count.METH_read();
  DEF_c__h293 = INST_rg_c.METH_read();
  DEF_b__h292 = INST_rg_b.METH_read();
  DEF_a__h291 = INST_rg_a.METH_read();
  DEF_s1_or_s0__h294 = INST_rg_s1_or_s2.METH_read();
  DEF_count_PLUS_1___d7 = DEF_b__h269 + 1u;
  INST_mac.METH_get_input(DEF_a__h291, DEF_b__h292, DEF_c__h293, DEF_s1_or_s0__h294);
  INST_count.METH_write(DEF_count_PLUS_1___d7);
}

void MOD_mkTb::RL_stall()
{
  DEF_b__h269 = INST_count.METH_read();
  DEF_count_PLUS_1___d7 = DEF_b__h269 + 1u;
  INST_count.METH_write(DEF_count_PLUS_1___d7);
}

void MOD_mkTb::RL_res()
{
  tUInt32 DEF_rg_m__h380;
  tUInt32 DEF_signed_count___d13;
  DEF_b__h269 = INST_count.METH_read();
  DEF_signed_count___d13 = DEF_b__h269;
  DEF_rg_m__h380 = INST_mac.METH_get_result();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_1, DEF_signed_count___d13, DEF_rg_m__h380);
    dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rg_s1_or_s2.reset_RST(ARG_rst_in);
  INST_rg_c.reset_RST(ARG_rst_in);
  INST_rg_b.reset_RST(ARG_rst_in);
  INST_rg_a.reset_RST(ARG_rst_in);
  INST_mac.reset_RST_N(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_count.dump_state(indent + 2u);
  INST_mac.dump_state(indent + 2u);
  INST_rg_a.dump_state(indent + 2u);
  INST_rg_b.dump_state(indent + 2u);
  INST_rg_c.dump_state(indent + 2u);
  INST_rg_s1_or_s2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 14u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_res", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_stall", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_res", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stall", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h269", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "count_PLUS_1___d7", 32u);
  num = INST_count.dump_VCD_defs(num);
  num = INST_rg_a.dump_VCD_defs(num);
  num = INST_rg_b.dump_VCD_defs(num);
  num = INST_rg_c.dump_VCD_defs(num);
  num = INST_rg_s1_or_s2.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_mac.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_inp) != DEF_CAN_FIRE_RL_inp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inp, 1u);
	backing.DEF_CAN_FIRE_RL_inp = DEF_CAN_FIRE_RL_inp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_res) != DEF_CAN_FIRE_RL_res)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_res, 1u);
	backing.DEF_CAN_FIRE_RL_res = DEF_CAN_FIRE_RL_res;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_stall) != DEF_CAN_FIRE_RL_stall)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_stall, 1u);
	backing.DEF_CAN_FIRE_RL_stall = DEF_CAN_FIRE_RL_stall;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inp) != DEF_WILL_FIRE_RL_inp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inp, 1u);
	backing.DEF_WILL_FIRE_RL_inp = DEF_WILL_FIRE_RL_inp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_res) != DEF_WILL_FIRE_RL_res)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_res, 1u);
	backing.DEF_WILL_FIRE_RL_res = DEF_WILL_FIRE_RL_res;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stall) != DEF_WILL_FIRE_RL_stall)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stall, 1u);
	backing.DEF_WILL_FIRE_RL_stall = DEF_WILL_FIRE_RL_stall;
      }
      ++num;
      if ((backing.DEF_b__h269) != DEF_b__h269)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h269, 32u);
	backing.DEF_b__h269 = DEF_b__h269;
      }
      ++num;
      if ((backing.DEF_count_PLUS_1___d7) != DEF_count_PLUS_1___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_count_PLUS_1___d7, 32u);
	backing.DEF_count_PLUS_1___d7 = DEF_count_PLUS_1___d7;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inp, 1u);
      backing.DEF_CAN_FIRE_RL_inp = DEF_CAN_FIRE_RL_inp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_res, 1u);
      backing.DEF_CAN_FIRE_RL_res = DEF_CAN_FIRE_RL_res;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_stall, 1u);
      backing.DEF_CAN_FIRE_RL_stall = DEF_CAN_FIRE_RL_stall;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inp, 1u);
      backing.DEF_WILL_FIRE_RL_inp = DEF_WILL_FIRE_RL_inp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_res, 1u);
      backing.DEF_WILL_FIRE_RL_res = DEF_WILL_FIRE_RL_res;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stall, 1u);
      backing.DEF_WILL_FIRE_RL_stall = DEF_WILL_FIRE_RL_stall;
      vcd_write_val(sim_hdl, num++, DEF_b__h269, 32u);
      backing.DEF_b__h269 = DEF_b__h269;
      vcd_write_val(sim_hdl, num++, DEF_count_PLUS_1___d7, 32u);
      backing.DEF_count_PLUS_1___d7 = DEF_count_PLUS_1___d7;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_rg_a.dump_VCD(dt, backing.INST_rg_a);
  INST_rg_b.dump_VCD(dt, backing.INST_rg_b);
  INST_rg_c.dump_VCD(dt, backing.INST_rg_c);
  INST_rg_s1_or_s2.dump_VCD(dt, backing.INST_rg_s1_or_s2);
}

void MOD_mkTb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  INST_mac.dump_VCD(dt, levels, backing.INST_mac);
}
