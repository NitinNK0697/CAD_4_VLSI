//
// Generated by Bluespec Compiler, version 2024.07 (build b4f31dbe)
//
// On Mon Oct 28 21:52:56 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_Tb(CLK,
	     RST_N);
  input  CLK;
  input  RST_N;

  // register as1
  reg [31 : 0] as1;
  wire [31 : 0] as1$D_IN;
  wire as1$EN;

  // register as10
  reg [31 : 0] as10;
  wire [31 : 0] as10$D_IN;
  wire as10$EN;

  // register as11
  reg [31 : 0] as11;
  wire [31 : 0] as11$D_IN;
  wire as11$EN;

  // register as12
  reg [31 : 0] as12;
  wire [31 : 0] as12$D_IN;
  wire as12$EN;

  // register as2
  reg [31 : 0] as2;
  wire [31 : 0] as2$D_IN;
  wire as2$EN;

  // register as3
  reg [31 : 0] as3;
  wire [31 : 0] as3$D_IN;
  wire as3$EN;

  // register as4
  reg [31 : 0] as4;
  wire [31 : 0] as4$D_IN;
  wire as4$EN;

  // register as5
  reg [31 : 0] as5;
  wire [31 : 0] as5$D_IN;
  wire as5$EN;

  // register as6
  reg [31 : 0] as6;
  wire [31 : 0] as6$D_IN;
  wire as6$EN;

  // register as7
  reg [31 : 0] as7;
  wire [31 : 0] as7$D_IN;
  wire as7$EN;

  // register as8
  reg [31 : 0] as8;
  wire [31 : 0] as8$D_IN;
  wire as8$EN;

  // register as9
  reg [31 : 0] as9;
  wire [31 : 0] as9$D_IN;
  wire as9$EN;

  // register bs1
  reg [31 : 0] bs1;
  wire [31 : 0] bs1$D_IN;
  wire bs1$EN;

  // register bs10
  reg [31 : 0] bs10;
  wire [31 : 0] bs10$D_IN;
  wire bs10$EN;

  // register bs11
  reg [31 : 0] bs11;
  wire [31 : 0] bs11$D_IN;
  wire bs11$EN;

  // register bs12
  reg [31 : 0] bs12;
  wire [31 : 0] bs12$D_IN;
  wire bs12$EN;

  // register bs2
  reg [31 : 0] bs2;
  wire [31 : 0] bs2$D_IN;
  wire bs2$EN;

  // register bs3
  reg [31 : 0] bs3;
  wire [31 : 0] bs3$D_IN;
  wire bs3$EN;

  // register bs4
  reg [31 : 0] bs4;
  wire [31 : 0] bs4$D_IN;
  wire bs4$EN;

  // register bs5
  reg [31 : 0] bs5;
  wire [31 : 0] bs5$D_IN;
  wire bs5$EN;

  // register bs6
  reg [31 : 0] bs6;
  wire [31 : 0] bs6$D_IN;
  wire bs6$EN;

  // register bs7
  reg [31 : 0] bs7;
  wire [31 : 0] bs7$D_IN;
  wire bs7$EN;

  // register bs8
  reg [31 : 0] bs8;
  wire [31 : 0] bs8$D_IN;
  wire bs8$EN;

  // register bs9
  reg [31 : 0] bs9;
  wire [31 : 0] bs9$D_IN;
  wire bs9$EN;

  // register count
  reg [31 : 0] count;
  wire [31 : 0] count$D_IN;
  wire count$EN;

  // register cs1
  reg [31 : 0] cs1;
  wire [31 : 0] cs1$D_IN;
  wire cs1$EN;

  // register cs10
  reg [31 : 0] cs10;
  wire [31 : 0] cs10$D_IN;
  wire cs10$EN;

  // register cs11
  reg [31 : 0] cs11;
  wire [31 : 0] cs11$D_IN;
  wire cs11$EN;

  // register cs12
  reg [31 : 0] cs12;
  wire [31 : 0] cs12$D_IN;
  wire cs12$EN;

  // register cs2
  reg [31 : 0] cs2;
  wire [31 : 0] cs2$D_IN;
  wire cs2$EN;

  // register cs3
  reg [31 : 0] cs3;
  wire [31 : 0] cs3$D_IN;
  wire cs3$EN;

  // register cs4
  reg [31 : 0] cs4;
  wire [31 : 0] cs4$D_IN;
  wire cs4$EN;

  // register cs5
  reg [31 : 0] cs5;
  wire [31 : 0] cs5$D_IN;
  wire cs5$EN;

  // register cs6
  reg [31 : 0] cs6;
  wire [31 : 0] cs6$D_IN;
  wire cs6$EN;

  // register cs7
  reg [31 : 0] cs7;
  wire [31 : 0] cs7$D_IN;
  wire cs7$EN;

  // register cs8
  reg [31 : 0] cs8;
  wire [31 : 0] cs8$D_IN;
  wire cs8$EN;

  // register cs9
  reg [31 : 0] cs9;
  wire [31 : 0] cs9$D_IN;
  wire cs9$EN;

  // register failed_cases
  reg [31 : 0] failed_cases;
  wire [31 : 0] failed_cases$D_IN;
  wire failed_cases$EN;

  // register mac_guard_bit_s9
  reg mac_guard_bit_s9;
  wire mac_guard_bit_s9$D_IN, mac_guard_bit_s9$EN;

  // register mac_obj_unsignedmult_rg_a
  reg [7 : 0] mac_obj_unsignedmult_rg_a;
  wire [7 : 0] mac_obj_unsignedmult_rg_a$D_IN;
  wire mac_obj_unsignedmult_rg_a$EN;

  // register mac_obj_unsignedmult_rg_b
  reg [7 : 0] mac_obj_unsignedmult_rg_b;
  wire [7 : 0] mac_obj_unsignedmult_rg_b$D_IN;
  wire mac_obj_unsignedmult_rg_b$EN;

  // register mac_obj_unsignedmult_rg_s1_op_0
  reg [15 : 0] mac_obj_unsignedmult_rg_s1_op_0;
  wire [15 : 0] mac_obj_unsignedmult_rg_s1_op_0$D_IN;
  wire mac_obj_unsignedmult_rg_s1_op_0$EN;

  // register mac_obj_unsignedmult_rg_s1_op_1
  reg [15 : 0] mac_obj_unsignedmult_rg_s1_op_1;
  wire [15 : 0] mac_obj_unsignedmult_rg_s1_op_1$D_IN;
  wire mac_obj_unsignedmult_rg_s1_op_1$EN;

  // register mac_obj_unsignedmult_rg_s1_op_2
  reg [15 : 0] mac_obj_unsignedmult_rg_s1_op_2;
  wire [15 : 0] mac_obj_unsignedmult_rg_s1_op_2$D_IN;
  wire mac_obj_unsignedmult_rg_s1_op_2$EN;

  // register mac_obj_unsignedmult_rg_s1_op_3
  reg [15 : 0] mac_obj_unsignedmult_rg_s1_op_3;
  wire [15 : 0] mac_obj_unsignedmult_rg_s1_op_3$D_IN;
  wire mac_obj_unsignedmult_rg_s1_op_3$EN;

  // register mac_obj_unsignedmult_rg_s1_op_4
  reg [15 : 0] mac_obj_unsignedmult_rg_s1_op_4;
  wire [15 : 0] mac_obj_unsignedmult_rg_s1_op_4$D_IN;
  wire mac_obj_unsignedmult_rg_s1_op_4$EN;

  // register mac_obj_unsignedmult_rg_s1_val
  reg mac_obj_unsignedmult_rg_s1_val;
  wire mac_obj_unsignedmult_rg_s1_val$D_IN, mac_obj_unsignedmult_rg_s1_val$EN;

  // register mac_obj_unsignedmult_rg_s2_op_0
  reg [15 : 0] mac_obj_unsignedmult_rg_s2_op_0;
  wire [15 : 0] mac_obj_unsignedmult_rg_s2_op_0$D_IN;
  wire mac_obj_unsignedmult_rg_s2_op_0$EN;

  // register mac_obj_unsignedmult_rg_s2_op_1
  reg [15 : 0] mac_obj_unsignedmult_rg_s2_op_1;
  wire [15 : 0] mac_obj_unsignedmult_rg_s2_op_1$D_IN;
  wire mac_obj_unsignedmult_rg_s2_op_1$EN;

  // register mac_obj_unsignedmult_rg_s2_op_2
  reg [15 : 0] mac_obj_unsignedmult_rg_s2_op_2;
  wire [15 : 0] mac_obj_unsignedmult_rg_s2_op_2$D_IN;
  wire mac_obj_unsignedmult_rg_s2_op_2$EN;

  // register mac_obj_unsignedmult_rg_s2_val
  reg mac_obj_unsignedmult_rg_s2_val;
  wire mac_obj_unsignedmult_rg_s2_val$D_IN, mac_obj_unsignedmult_rg_s2_val$EN;

  // register mac_obj_unsignedmult_rg_s3_op_0
  reg [15 : 0] mac_obj_unsignedmult_rg_s3_op_0;
  wire [15 : 0] mac_obj_unsignedmult_rg_s3_op_0$D_IN;
  wire mac_obj_unsignedmult_rg_s3_op_0$EN;

  // register mac_obj_unsignedmult_rg_s3_op_1
  reg [15 : 0] mac_obj_unsignedmult_rg_s3_op_1;
  wire [15 : 0] mac_obj_unsignedmult_rg_s3_op_1$D_IN;
  wire mac_obj_unsignedmult_rg_s3_op_1$EN;

  // register mac_obj_unsignedmult_rg_s3_val
  reg mac_obj_unsignedmult_rg_s3_val;
  wire mac_obj_unsignedmult_rg_s3_val$D_IN, mac_obj_unsignedmult_rg_s3_val$EN;

  // register mac_obj_unsignedmult_rg_s4_op
  reg [15 : 0] mac_obj_unsignedmult_rg_s4_op;
  wire [15 : 0] mac_obj_unsignedmult_rg_s4_op$D_IN;
  wire mac_obj_unsignedmult_rg_s4_op$EN;

  // register mac_obj_unsignedmult_rg_s4_val
  reg mac_obj_unsignedmult_rg_s4_val;
  wire mac_obj_unsignedmult_rg_s4_val$D_IN, mac_obj_unsignedmult_rg_s4_val$EN;

  // register mac_obj_unsignedmult_rg_s5_val
  reg mac_obj_unsignedmult_rg_s5_val;
  wire mac_obj_unsignedmult_rg_s5_val$D_IN, mac_obj_unsignedmult_rg_s5_val$EN;

  // register mac_out
  reg [31 : 0] mac_out;
  wire [31 : 0] mac_out$D_IN;
  wire mac_out$EN;

  // register mac_rg_A
  reg [15 : 0] mac_rg_A;
  wire [15 : 0] mac_rg_A$D_IN;
  wire mac_rg_A$EN;

  // register mac_rg_B
  reg [15 : 0] mac_rg_B;
  wire [15 : 0] mac_rg_B$D_IN;
  wire mac_rg_B$EN;

  // register mac_rg_C
  reg [31 : 0] mac_rg_C;
  wire [31 : 0] mac_rg_C$D_IN;
  wire mac_rg_C$EN;

  // register mac_rg_C_s1
  reg [31 : 0] mac_rg_C_s1;
  wire [31 : 0] mac_rg_C_s1$D_IN;
  wire mac_rg_C_s1$EN;

  // register mac_rg_C_s2
  reg [31 : 0] mac_rg_C_s2;
  wire [31 : 0] mac_rg_C_s2$D_IN;
  wire mac_rg_C_s2$EN;

  // register mac_rg_C_s3
  reg [31 : 0] mac_rg_C_s3;
  wire [31 : 0] mac_rg_C_s3$D_IN;
  wire mac_rg_C_s3$EN;

  // register mac_rg_C_s4
  reg [31 : 0] mac_rg_C_s4;
  wire [31 : 0] mac_rg_C_s4$D_IN;
  wire mac_rg_C_s4$EN;

  // register mac_rg_C_s5
  reg [31 : 0] mac_rg_C_s5;
  wire [31 : 0] mac_rg_C_s5$D_IN;
  wire mac_rg_C_s5$EN;

  // register mac_rg_C_s6
  reg [31 : 0] mac_rg_C_s6;
  wire [31 : 0] mac_rg_C_s6$D_IN;
  wire mac_rg_C_s6$EN;

  // register mac_rg_C_s7
  reg [31 : 0] mac_rg_C_s7;
  wire [31 : 0] mac_rg_C_s7$D_IN;
  wire mac_rg_C_s7$EN;

  // register mac_rg_exception_s1
  reg [1 : 0] mac_rg_exception_s1;
  wire [1 : 0] mac_rg_exception_s1$D_IN;
  wire mac_rg_exception_s1$EN;

  // register mac_rg_exception_s2
  reg [1 : 0] mac_rg_exception_s2;
  wire [1 : 0] mac_rg_exception_s2$D_IN;
  wire mac_rg_exception_s2$EN;

  // register mac_rg_exception_s3
  reg [1 : 0] mac_rg_exception_s3;
  wire [1 : 0] mac_rg_exception_s3$D_IN;
  wire mac_rg_exception_s3$EN;

  // register mac_rg_exception_s4
  reg [1 : 0] mac_rg_exception_s4;
  wire [1 : 0] mac_rg_exception_s4$D_IN;
  wire mac_rg_exception_s4$EN;

  // register mac_rg_exception_s6
  reg [1 : 0] mac_rg_exception_s6;
  wire [1 : 0] mac_rg_exception_s6$D_IN;
  wire mac_rg_exception_s6$EN;

  // register mac_rg_exception_s7
  reg [1 : 0] mac_rg_exception_s7;
  wire [1 : 0] mac_rg_exception_s7$D_IN;
  wire mac_rg_exception_s7$EN;

  // register mac_rg_exception_s8
  reg [1 : 0] mac_rg_exception_s8;
  wire [1 : 0] mac_rg_exception_s8$D_IN;
  wire mac_rg_exception_s8$EN;

  // register mac_rg_exp_add_s1
  reg [7 : 0] mac_rg_exp_add_s1;
  wire [7 : 0] mac_rg_exp_add_s1$D_IN;
  wire mac_rg_exp_add_s1$EN;

  // register mac_rg_exp_add_s2
  reg [7 : 0] mac_rg_exp_add_s2;
  wire [7 : 0] mac_rg_exp_add_s2$D_IN;
  wire mac_rg_exp_add_s2$EN;

  // register mac_rg_exp_add_s3
  reg [7 : 0] mac_rg_exp_add_s3;
  wire [7 : 0] mac_rg_exp_add_s3$D_IN;
  wire mac_rg_exp_add_s3$EN;

  // register mac_rg_exp_add_s4
  reg [7 : 0] mac_rg_exp_add_s4;
  wire [7 : 0] mac_rg_exp_add_s4$D_IN;
  wire mac_rg_exp_add_s4$EN;

  // register mac_rg_exp_diff_s6
  reg [7 : 0] mac_rg_exp_diff_s6;
  wire [7 : 0] mac_rg_exp_diff_s6$D_IN;
  wire mac_rg_exp_diff_s6$EN;

  // register mac_rg_exp_diff_s7
  reg [7 : 0] mac_rg_exp_diff_s7;
  wire [7 : 0] mac_rg_exp_diff_s7$D_IN;
  wire mac_rg_exp_diff_s7$EN;

  // register mac_rg_exponent_s8
  reg [7 : 0] mac_rg_exponent_s8;
  wire [7 : 0] mac_rg_exponent_s8$D_IN;
  wire mac_rg_exponent_s8$EN;

  // register mac_rg_exponent_s9
  reg [7 : 0] mac_rg_exponent_s9;
  wire [7 : 0] mac_rg_exponent_s9$D_IN;
  wire mac_rg_exponent_s9$EN;

  // register mac_rg_mant_s8
  reg [27 : 0] mac_rg_mant_s8;
  wire [27 : 0] mac_rg_mant_s8$D_IN;
  wire mac_rg_mant_s8$EN;

  // register mac_rg_mant_s9
  reg [26 : 0] mac_rg_mant_s9;
  reg [26 : 0] mac_rg_mant_s9$D_IN;
  wire mac_rg_mant_s9$EN;

  // register mac_rg_mant_shift_s7
  reg [26 : 0] mac_rg_mant_shift_s7;
  wire [26 : 0] mac_rg_mant_shift_s7$D_IN;
  wire mac_rg_mant_shift_s7$EN;

  // register mac_rg_mult_mant_s7
  reg [26 : 0] mac_rg_mult_mant_s7;
  wire [26 : 0] mac_rg_mult_mant_s7$D_IN;
  wire mac_rg_mult_mant_s7$EN;

  // register mac_rg_mult_s5
  reg [31 : 0] mac_rg_mult_s5;
  wire [31 : 0] mac_rg_mult_s5$D_IN;
  wire mac_rg_mult_s5$EN;

  // register mac_rg_mult_s6
  reg [31 : 0] mac_rg_mult_s6;
  wire [31 : 0] mac_rg_mult_s6$D_IN;
  wire mac_rg_mult_s6$EN;

  // register mac_rg_mult_s7
  reg [31 : 0] mac_rg_mult_s7;
  wire [31 : 0] mac_rg_mult_s7$D_IN;
  wire mac_rg_mult_s7$EN;

  // register mac_rg_out_valid
  reg mac_rg_out_valid;
  wire mac_rg_out_valid$D_IN, mac_rg_out_valid$EN;

  // register mac_rg_s10_valid
  reg mac_rg_s10_valid;
  wire mac_rg_s10_valid$D_IN, mac_rg_s10_valid$EN;

  // register mac_rg_s1_valid
  reg mac_rg_s1_valid;
  wire mac_rg_s1_valid$D_IN, mac_rg_s1_valid$EN;

  // register mac_rg_s2_valid
  reg mac_rg_s2_valid;
  wire mac_rg_s2_valid$D_IN, mac_rg_s2_valid$EN;

  // register mac_rg_s3_valid
  reg mac_rg_s3_valid;
  wire mac_rg_s3_valid$D_IN, mac_rg_s3_valid$EN;

  // register mac_rg_s4_valid
  reg mac_rg_s4_valid;
  wire mac_rg_s4_valid$D_IN, mac_rg_s4_valid$EN;

  // register mac_rg_s5_valid
  reg mac_rg_s5_valid;
  wire mac_rg_s5_valid$D_IN, mac_rg_s5_valid$EN;

  // register mac_rg_s6_valid
  reg mac_rg_s6_valid;
  wire mac_rg_s6_valid$D_IN, mac_rg_s6_valid$EN;

  // register mac_rg_s7_valid
  reg mac_rg_s7_valid;
  wire mac_rg_s7_valid$D_IN, mac_rg_s7_valid$EN;

  // register mac_rg_s8_valid
  reg mac_rg_s8_valid;
  wire mac_rg_s8_valid$D_IN, mac_rg_s8_valid$EN;

  // register mac_rg_s9_valid
  reg mac_rg_s9_valid;
  wire mac_rg_s9_valid$D_IN, mac_rg_s9_valid$EN;

  // register mac_rg_sign_s1
  reg mac_rg_sign_s1;
  wire mac_rg_sign_s1$D_IN, mac_rg_sign_s1$EN;

  // register mac_rg_sign_s2
  reg mac_rg_sign_s2;
  wire mac_rg_sign_s2$D_IN, mac_rg_sign_s2$EN;

  // register mac_rg_sign_s3
  reg mac_rg_sign_s3;
  wire mac_rg_sign_s3$D_IN, mac_rg_sign_s3$EN;

  // register mac_rg_sign_s4
  reg mac_rg_sign_s4;
  wire mac_rg_sign_s4$D_IN, mac_rg_sign_s4$EN;

  // register mac_rg_sign_s8
  reg mac_rg_sign_s8;
  wire mac_rg_sign_s8$D_IN, mac_rg_sign_s8$EN;

  // register mac_rg_sign_s9
  reg mac_rg_sign_s9;
  wire mac_rg_sign_s9$D_IN, mac_rg_sign_s9$EN;

  // register mac_round_bit_s9
  reg mac_round_bit_s9;
  wire mac_round_bit_s9$D_IN, mac_round_bit_s9$EN;

  // register mac_sticky_bit_s9
  reg mac_sticky_bit_s9;
  wire mac_sticky_bit_s9$D_IN, mac_sticky_bit_s9$EN;

  // register macs1
  reg [31 : 0] macs1;
  wire [31 : 0] macs1$D_IN;
  wire macs1$EN;

  // register macs10
  reg [31 : 0] macs10;
  wire [31 : 0] macs10$D_IN;
  wire macs10$EN;

  // register macs2
  reg [31 : 0] macs2;
  wire [31 : 0] macs2$D_IN;
  wire macs2$EN;

  // register macs3
  reg [31 : 0] macs3;
  wire [31 : 0] macs3$D_IN;
  wire macs3$EN;

  // register macs4
  reg [31 : 0] macs4;
  wire [31 : 0] macs4$D_IN;
  wire macs4$EN;

  // register macs5
  reg [31 : 0] macs5;
  wire [31 : 0] macs5$D_IN;
  wire macs5$EN;

  // register macs6
  reg [31 : 0] macs6;
  wire [31 : 0] macs6$D_IN;
  wire macs6$EN;

  // register macs7
  reg [31 : 0] macs7;
  wire [31 : 0] macs7$D_IN;
  wire macs7$EN;

  // register macs8
  reg [31 : 0] macs8;
  wire [31 : 0] macs8$D_IN;
  wire macs8$EN;

  // register macs9
  reg [31 : 0] macs9;
  wire [31 : 0] macs9$D_IN;
  wire macs9$EN;

  // register rg_a
  reg [15 : 0] rg_a;
  wire [15 : 0] rg_a$D_IN;
  wire rg_a$EN;

  // register rg_af
  reg [31 : 0] rg_af;
  wire [31 : 0] rg_af$D_IN;
  wire rg_af$EN;

  // register rg_b
  reg [15 : 0] rg_b;
  wire [15 : 0] rg_b$D_IN;
  wire rg_b$EN;

  // register rg_bf
  reg [31 : 0] rg_bf;
  wire [31 : 0] rg_bf$D_IN;
  wire rg_bf$EN;

  // register rg_c
  reg [31 : 0] rg_c;
  wire [31 : 0] rg_c$D_IN;
  wire rg_c$EN;

  // register rg_cf
  reg [31 : 0] rg_cf;
  wire [31 : 0] rg_cf$D_IN;
  wire rg_cf$EN;

  // register rg_macf
  reg [31 : 0] rg_macf;
  wire [31 : 0] rg_macf$D_IN;
  wire rg_macf$EN;

  // register rg_r
  reg rg_r;
  wire rg_r$D_IN, rg_r$EN;

  // ports of submodule obj_inp
  wire [31 : 0] obj_inp$out_c, obj_inp$out_mac;
  wire [15 : 0] obj_inp$out_a, obj_inp$out_b;
  wire obj_inp$EN, obj_inp$read;

  // remaining internal signals
  reg [30 : 0] IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1958,
	       IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1939;
  reg [22 : 0] CASE_grs1335_0b11_mac_rg_mant_s9_102_BITS_26_T_ETC__q19,
	       CASE_guard0181_0b10_out_sfd5744_0b11_theResult_ETC__q17,
	       CASE_guard5411_0b10_out_sfd4077_0b11_theResult_ETC__q10,
	       CASE_mac_rg_exception_s1_1_0_2_0_4194304__q4;
  reg [8 : 0] IF_IF_IF_mac_obj_unsignedmult_rg_s5_val_53_THE_ETC___d778;
  reg [7 : 0] CASE_guard0181_0b10_out_exp5743_0b11_theResult_ETC__q18,
	      CASE_guard5411_0b10_out_exp4076_0b11_theResult_ETC__q11,
	      CASE_mac_rg_exception_s1_1_0_2_255_255__q3;
  wire [47 : 0] IF_0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_3_ETC__q8,
		NOT_as10_173_BITS_30_TO_23_174_EQ_0_198_238_CO_ETC___d1258,
		_theResult___snd__h45955,
		_theResult___snd__h53514,
		_theResult___snd__h53528,
		_theResult___snd__h53530,
		_theResult___snd__h53542,
		_theResult___snd__h53548,
		_theResult___snd__h53566,
		_theResult___snd__h53571,
		sfdin__h53485,
		sfdres__h43985,
		sfdres__h45089,
		x__h46037;
  wire [31 : 0] mac_result__h43647,
		mul_result__h31239,
		x__h32035,
		x__h32089,
		x__h32148,
		x__h32391;
  wire [30 : 0] IF_0b0_CONCAT_NOT_IF_NOT_IF_as10_173_BITS_30_T_ETC___d1955,
		IF_0b0_CONCAT_NOT_IF_NOT_as10_173_BITS_30_TO_2_ETC___d1936,
		IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1932,
		IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1951,
		IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1959,
		IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1940,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1944,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1945,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1947,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1949,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1960,
		IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1941,
		IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_N_ETC___d1929,
		IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d798;
  wire [28 : 0] IF_mac_rg_mult_s7_64_BIT_31_65_XOR_mac_rg_C_s7_ETC___d875,
		a_temp__h32978,
		b_temp__h32979;
  wire [27 : 0] IF_0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_T_ETC__q15,
		IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1679,
		_0b0_CONCAT_IF_NOT_IF_cs10_568_BITS_30_TO_23_56_ETC___d1668,
		_theResult___snd__h65201,
		_theResult___snd__h65215,
		_theResult___snd__h65217,
		_theResult___snd__h65229,
		_theResult___snd__h65235,
		_theResult___snd__h65253,
		_theResult___snd__h65258,
		a__h43907,
		b__h43909,
		guard__h60784,
		opB__h43923,
		result__h60772,
		result__h60789,
		result__h60901,
		sfdA__h43941,
		sfdB__h43942,
		sfdin__h60194,
		sfdin__h65172;
  wire [26 : 0] IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1666,
		IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1061,
		x__h32826,
		x__h33408,
		x__h40065;
  wire [25 : 0] c_mant_s7__h32644, mantissa__h33337;
  wire [24 : 0] sfd__h53601, sfd__h65288;
  wire [23 : 0] IF_theResult_____11349_EQ_255_THEN_0_ELSE_IF_I_ETC__q2,
		opAsfd__h44015,
		opBsfd__h44016;
  wire [22 : 0] IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1878,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1880,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1884,
		IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1893,
		IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1552,
		IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1548,
		IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1550,
		IF_cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_N_ETC___d1883,
		_theResult___fst_sfd__h53495,
		_theResult___fst_sfd__h54093,
		_theResult___fst_sfd__h65182,
		_theResult___fst_sfd__h65760,
		_theResult___sfd__h54074,
		_theResult___sfd__h65741,
		_theResult___snd_fst_sfd__h53501,
		_theResult___snd_fst_sfd__h65188,
		mac_rg_mant_s9_102_BITS_26_TO_4_103_PLUS_1___d1104,
		out_sfd__h54077,
		out_sfd__h65744,
		sfd__h45110,
		sfd__h45113,
		sfd__h60165,
		sfd__h60168,
		x__h54130;
  wire [15 : 0] IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755;
  wire [9 : 0] IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1616,
	       IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1209,
	       IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THEN_89_ETC___d1612,
	       _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1251,
	       value__h53426,
	       x__h46070,
	       x__h60777,
	       x__h60781;
  wire [8 : 0] IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277,
	       IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1476,
	       IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689,
	       IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1808,
	       mantissa_round__h31580;
  wire [7 : 0] IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1864,
	       IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1532,
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1589,
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1591,
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1593,
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1871,
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1226,
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1222,
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1224,
	       IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1070,
	       _theResult_____1__h31349,
	       _theResult___exp__h54073,
	       _theResult___exp__h65740,
	       _theResult___fst_exp__h53491,
	       _theResult___fst_exp__h53494,
	       _theResult___fst_exp__h53519,
	       _theResult___fst_exp__h53534,
	       _theResult___fst_exp__h53573,
	       _theResult___fst_exp__h53579,
	       _theResult___fst_exp__h53582,
	       _theResult___fst_exp__h54092,
	       _theResult___fst_exp__h65178,
	       _theResult___fst_exp__h65181,
	       _theResult___fst_exp__h65206,
	       _theResult___fst_exp__h65221,
	       _theResult___fst_exp__h65260,
	       _theResult___fst_exp__h65266,
	       _theResult___fst_exp__h65269,
	       _theResult___fst_exp__h65759,
	       _theResult___snd_fst_exp__h53500,
	       _theResult___snd_fst_exp__h65187,
	       as10_BITS_30_TO_23_MINUS_127__q5,
	       bs10_BITS_30_TO_23_MINUS_127__q6,
	       cs10_BITS_30_TO_23_MINUS_127__q12,
	       diff__h43927,
	       din_exp3409_MINUS_127__q7,
	       din_exp5124_MINUS_127__q14,
	       din_exp__h53409,
	       din_exp__h65124,
	       din_inc___2_exp__h54109,
	       din_inc___2_exp__h65808,
	       e__h30675,
	       exp___1__h31417,
	       exp___1__h31625,
	       exp__h31339,
	       exp_diff_s6__h31866,
	       exponent__h33336,
	       exponent__h33365,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d172,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d54,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96,
	       mant_1__h31341,
	       op2__h40190,
	       out_exp__h54076,
	       out_exp__h65743,
	       spliced_bits__h24967,
	       x9472_MINUS_127__q13,
	       x__h30700,
	       x__h59472,
	       x__h60841,
	       y__h10525,
	       y__h10610,
	       y__h10992,
	       y__h11733,
	       y__h11817,
	       y__h11934,
	       y__h12979,
	       y__h14571,
	       y_avValue_snd__h30365,
	       y_avValue_snd__h30381,
	       y_avValue_snd__h30397;
  wire [5 : 0] IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1474,
	       mac_obj_unsignedmult_rg_s2_op_0_94_BIT_12_97_A_ETC___d552,
	       spliced_bits__h15770,
	       spliced_bits__h17164;
  wire [4 : 0] IF_IF_IF_IF_mac_rg_mant_s8_81_BIT_25_85_THEN_0_ETC___d979,
	       IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1806,
	       leftshift_count__h33335,
	       out__h33470,
	       spliced_bits__h33518;
  wire [3 : 0] IF_x6479_OR_y6480_THEN_1_ELSE_0__q1,
	       carrrg_b__h10328,
	       carrrg_b__h13470,
	       carrrg_b__h14512,
	       carrrg_b__h15958,
	       carrrg_b__h17352,
	       carrrg_b__h19068,
	       carrrg_b__h20527,
	       carrrg_b__h21932,
	       carrrg_b__h25894,
	       carrrg_b__h26857,
	       carrrg_b__h27900,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318,
	       mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451,
	       mac_obj_unsignedmult_rg_s2_op_0_94_BIT_10_09_A_ETC___d551,
	       mac_obj_unsignedmult_rg_s2_op_0_94_BIT_10_09_X_ETC___d528,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601,
	       p__h10324,
	       p__h13466,
	       p__h14508,
	       p__h15954,
	       p__h17348,
	       p__h19064,
	       p__h20523,
	       p__h21928,
	       p__h25890,
	       p__h26853,
	       p__h27896,
	       rg_b__h17340,
	       spliced_bits__h10173,
	       spliced_bits__h10232,
	       spliced_bits__h13262,
	       spliced_bits__h13321,
	       spliced_bits__h13380,
	       spliced_bits__h15868,
	       spliced_bits__h17262,
	       spliced_bits__h18973,
	       spliced_bits__h20437,
	       spliced_bits__h21842,
	       spliced_bits__h25718,
	       spliced_bits__h25748,
	       spliced_bits__h25778,
	       spliced_bits__h25808,
	       spliced_bits__h33641,
	       spliced_bits__h33671,
	       spliced_bits__h33701,
	       spliced_bits__h33730;
  wire [2 : 0] grs__h41335,
	       grs_mul_round__h31347,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d654,
	       spliced_bits__h33854,
	       spliced_bits__h33884,
	       spliced_bits__h33914,
	       spliced_bits__h33944,
	       spliced_bits__h33974,
	       spliced_bits__h34004,
	       spliced_bits__h34033;
  wire [1 : 0] IF_sfdin3485_BIT_24_THEN_2_ELSE_0__q9,
	       IF_sfdin5172_BIT_4_THEN_2_ELSE_0__q16,
	       _theResult___snd_fst__h53639,
	       _theResult___snd_fst__h65311,
	       e__h35977,
	       e__h36118,
	       e__h36259,
	       e__h36400,
	       e__h36541,
	       e__h36682,
	       e__h36823,
	       e__h36964,
	       e__h37105,
	       e__h37246,
	       e__h37387,
	       e__h37528,
	       e__h37668,
	       guard__h45411,
	       guard__h60147,
	       guard__h60181,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d118,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86,
	       mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d411,
	       mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d427,
	       spliced_bits__h34399,
	       spliced_bits__h34468,
	       spliced_bits__h34537,
	       spliced_bits__h34606,
	       spliced_bits__h34675,
	       spliced_bits__h34744,
	       spliced_bits__h34813,
	       spliced_bits__h34882,
	       spliced_bits__h34951,
	       spliced_bits__h35020,
	       spliced_bits__h35089,
	       spliced_bits__h35158,
	       spliced_bits__h35227,
	       x__h32550;
  wire IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1647,
       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1907,
       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1908,
       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1910,
       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1912,
       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1918,
       IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1915,
       IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1210,
       IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1212,
       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648,
       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1651,
       IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_N_ETC___d1641,
       IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_b_ETC___d1639,
       IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d802,
       IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1088,
       NOT_IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1905,
       NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_A_ETC___d1897,
       NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_A_ETC___d1902,
       NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629,
       NOT_IF_mac_rg_out_valid_159_THEN_mac_out_160_E_ETC___d1166,
       NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1246,
       NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1250,
       NOT_as10_173_BIT_31_631_EQ_bs10_183_BIT_31_632_ETC___d1637,
       NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607,
       _0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_30_T_ETC___d1477,
       _0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_2_ETC___d1809,
       _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1252,
       as10_173_BITS_30_TO_23_174_EQ_255_175_AND_NOT__ETC___d1219,
       as10_173_BITS_30_TO_23_174_EQ_255_175_AND_as10_ETC___d1215,
       cin__h27889,
       cin__h28934,
       cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_NOT__ETC___d1585,
       cs10_568_BIT_31_630_EQ_IF_as10_173_BITS_30_TO__ETC___d1649,
       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d66,
       mac_rg_mult_mant_s7_59_ULE_mac_rg_mant_shift_s_ETC___d861,
       mul_sticky_bit__h31421,
       mul_sticky_bit__h31448,
       sfdlsb__h45952,
       x__h10741,
       x__h10743,
       x__h10824,
       x__h10891,
       x__h11054,
       x__h11124,
       x__h11239,
       x__h11241,
       x__h11243,
       x__h11313,
       x__h11380,
       x__h11470,
       x__h12130,
       x__h12132,
       x__h12134,
       x__h12170,
       x__h12212,
       x__h12276,
       x__h12380,
       x__h12447,
       x__h12560,
       x__h12562,
       x__h12564,
       x__h12566,
       x__h12631,
       x__h12695,
       x__h12781,
       x__h13635,
       x__h13637,
       x__h13718,
       x__h13785,
       x__h13893,
       x__h13963,
       x__h14078,
       x__h14080,
       x__h14082,
       x__h14152,
       x__h14219,
       x__h14309,
       x__h14732,
       x__h14734,
       x__h14815,
       x__h14882,
       x__h14990,
       x__h15060,
       x__h15175,
       x__h15177,
       x__h15179,
       x__h15249,
       x__h15316,
       x__h15406,
       x__h16123,
       x__h16125,
       x__h16206,
       x__h16273,
       x__h16381,
       x__h16451,
       x__h16566,
       x__h16568,
       x__h16570,
       x__h16640,
       x__h16707,
       x__h16797,
       x__h17551,
       x__h17632,
       x__h17965,
       x__h17967,
       x__h18037,
       x__h18104,
       x__h19237,
       x__h19239,
       x__h19320,
       x__h19387,
       x__h19497,
       x__h19567,
       x__h19682,
       x__h19684,
       x__h19686,
       x__h19756,
       x__h19823,
       x__h19913,
       x__h20761,
       x__h20841,
       x__h21161,
       x__h21163,
       x__h21230,
       x__h21294,
       x__h22099,
       x__h22101,
       x__h22182,
       x__h22249,
       x__h22358,
       x__h22428,
       x__h22543,
       x__h22545,
       x__h22547,
       x__h22617,
       x__h22684,
       x__h22774,
       x__h23810,
       x__h23914,
       x__h24021,
       x__h24124,
       x__h24231,
       x__h24334,
       x__h24441,
       x__h24544,
       x__h24651,
       x__h24754,
       x__h26065,
       x__h26146,
       x__h26479,
       x__h26481,
       x__h26551,
       x__h26618,
       x__h27024,
       x__h27026,
       x__h27107,
       x__h27174,
       x__h27332,
       x__h27402,
       x__h27517,
       x__h27519,
       x__h27521,
       x__h27591,
       x__h27658,
       x__h27748,
       x__h28067,
       x__h28069,
       x__h28150,
       x__h28217,
       x__h28377,
       x__h28447,
       x__h28562,
       x__h28564,
       x__h28566,
       x__h28636,
       x__h28703,
       x__h28793,
       x__h29114,
       x__h29116,
       x__h29195,
       x__h29259,
       x__h29417,
       x__h29484,
       x__h40368,
       x__h40655,
       x__h40674,
       x__h40921,
       y__h10742,
       y__h10744,
       y__h10746,
       y__h11055,
       y__h11057,
       y__h11180,
       y__h11240,
       y__h11242,
       y__h11244,
       y__h11246,
       y__h12131,
       y__h12133,
       y__h12135,
       y__h12381,
       y__h12383,
       y__h12501,
       y__h12561,
       y__h12563,
       y__h12565,
       y__h12567,
       y__h13636,
       y__h13638,
       y__h13640,
       y__h13894,
       y__h13896,
       y__h14019,
       y__h14079,
       y__h14081,
       y__h14083,
       y__h14085,
       y__h14733,
       y__h14735,
       y__h14737,
       y__h14991,
       y__h14993,
       y__h15116,
       y__h15176,
       y__h15178,
       y__h15180,
       y__h15182,
       y__h16124,
       y__h16126,
       y__h16128,
       y__h16382,
       y__h16384,
       y__h16507,
       y__h16567,
       y__h16569,
       y__h16571,
       y__h16573,
       y__h17552,
       y__h17554,
       y__h17781,
       y__h17966,
       y__h17968,
       y__h17970,
       y__h19238,
       y__h19240,
       y__h19242,
       y__h19498,
       y__h19500,
       y__h19623,
       y__h19683,
       y__h19685,
       y__h19687,
       y__h19689,
       y__h20762,
       y__h20764,
       y__h20984,
       y__h21162,
       y__h21164,
       y__h21166,
       y__h22100,
       y__h22102,
       y__h22104,
       y__h22359,
       y__h22361,
       y__h22484,
       y__h22544,
       y__h22546,
       y__h22548,
       y__h22550,
       y__h23915,
       y__h24125,
       y__h24335,
       y__h24545,
       y__h24755,
       y__h26066,
       y__h26068,
       y__h26295,
       y__h26480,
       y__h26482,
       y__h26484,
       y__h27025,
       y__h27027,
       y__h27029,
       y__h27333,
       y__h27335,
       y__h27458,
       y__h27518,
       y__h27520,
       y__h27522,
       y__h27524,
       y__h28068,
       y__h28070,
       y__h28072,
       y__h28378,
       y__h28380,
       y__h28503,
       y__h28563,
       y__h28565,
       y__h28567,
       y__h28569,
       y__h29115,
       y__h29117,
       y__h29119,
       y__h29418,
       y__h29420,
       y__h29538;

  // submodule obj_inp
  file_read obj_inp(.RST(RST_N),
		    .clk(CLK),
		    .read(obj_inp$read),
		    .EN(obj_inp$EN),
		    .out_a(obj_inp$out_a),
		    .out_b(obj_inp$out_b),
		    .out_c(obj_inp$out_c),
		    .out_mac(obj_inp$out_mac));

  // register as1
  assign as1$D_IN = rg_af ;
  assign as1$EN = 1'd1 ;

  // register as10
  assign as10$D_IN = as9 ;
  assign as10$EN = 1'd1 ;

  // register as11
  assign as11$D_IN = 32'h0 ;
  assign as11$EN = 1'b0 ;

  // register as12
  assign as12$D_IN = 32'h0 ;
  assign as12$EN = 1'b0 ;

  // register as2
  assign as2$D_IN = as1 ;
  assign as2$EN = 1'd1 ;

  // register as3
  assign as3$D_IN = as2 ;
  assign as3$EN = 1'd1 ;

  // register as4
  assign as4$D_IN = as3 ;
  assign as4$EN = 1'd1 ;

  // register as5
  assign as5$D_IN = as4 ;
  assign as5$EN = 1'd1 ;

  // register as6
  assign as6$D_IN = as5 ;
  assign as6$EN = 1'd1 ;

  // register as7
  assign as7$D_IN = as6 ;
  assign as7$EN = 1'd1 ;

  // register as8
  assign as8$D_IN = as7 ;
  assign as8$EN = 1'd1 ;

  // register as9
  assign as9$D_IN = as8 ;
  assign as9$EN = 1'd1 ;

  // register bs1
  assign bs1$D_IN = rg_bf ;
  assign bs1$EN = 1'd1 ;

  // register bs10
  assign bs10$D_IN = bs9 ;
  assign bs10$EN = 1'd1 ;

  // register bs11
  assign bs11$D_IN = 32'h0 ;
  assign bs11$EN = 1'b0 ;

  // register bs12
  assign bs12$D_IN = 32'h0 ;
  assign bs12$EN = 1'b0 ;

  // register bs2
  assign bs2$D_IN = bs1 ;
  assign bs2$EN = 1'd1 ;

  // register bs3
  assign bs3$D_IN = bs2 ;
  assign bs3$EN = 1'd1 ;

  // register bs4
  assign bs4$D_IN = bs3 ;
  assign bs4$EN = 1'd1 ;

  // register bs5
  assign bs5$D_IN = bs4 ;
  assign bs5$EN = 1'd1 ;

  // register bs6
  assign bs6$D_IN = bs5 ;
  assign bs6$EN = 1'd1 ;

  // register bs7
  assign bs7$D_IN = bs6 ;
  assign bs7$EN = 1'd1 ;

  // register bs8
  assign bs8$D_IN = bs7 ;
  assign bs8$EN = 1'd1 ;

  // register bs9
  assign bs9$D_IN = bs8 ;
  assign bs9$EN = 1'd1 ;

  // register count
  assign count$D_IN = count + 32'd1 ;
  assign count$EN = 1'd1 ;

  // register cs1
  assign cs1$D_IN = rg_cf ;
  assign cs1$EN = 1'd1 ;

  // register cs10
  assign cs10$D_IN = cs9 ;
  assign cs10$EN = 1'd1 ;

  // register cs11
  assign cs11$D_IN = 32'h0 ;
  assign cs11$EN = 1'b0 ;

  // register cs12
  assign cs12$D_IN = 32'h0 ;
  assign cs12$EN = 1'b0 ;

  // register cs2
  assign cs2$D_IN = cs1 ;
  assign cs2$EN = 1'd1 ;

  // register cs3
  assign cs3$D_IN = cs2 ;
  assign cs3$EN = 1'd1 ;

  // register cs4
  assign cs4$D_IN = cs3 ;
  assign cs4$EN = 1'd1 ;

  // register cs5
  assign cs5$D_IN = cs4 ;
  assign cs5$EN = 1'd1 ;

  // register cs6
  assign cs6$D_IN = cs5 ;
  assign cs6$EN = 1'd1 ;

  // register cs7
  assign cs7$D_IN = cs6 ;
  assign cs7$EN = 1'd1 ;

  // register cs8
  assign cs8$D_IN = cs7 ;
  assign cs8$EN = 1'd1 ;

  // register cs9
  assign cs9$D_IN = cs8 ;
  assign cs9$EN = 1'd1 ;

  // register failed_cases
  assign failed_cases$D_IN = failed_cases + 32'd1 ;
  assign failed_cases$EN =
	     NOT_IF_mac_rg_out_valid_159_THEN_mac_out_160_E_ETC___d1166 &&
	     (count ^ 32'h80000000) >= 32'h8000000B ;

  // register mac_guard_bit_s9
  assign mac_guard_bit_s9$D_IN =
	     mac_rg_exception_s8 == 2'b0 &&
	     ((mac_rg_mant_s8[27:26] == 2'b0) ?
		mantissa__h33337[3] :
		(mac_rg_mant_s8[27] ?
		   mac_rg_mant_s8[4] :
		   mac_rg_mant_s8[3])) ;
  assign mac_guard_bit_s9$EN = mac_rg_s9_valid ;

  // register mac_obj_unsignedmult_rg_a
  assign mac_obj_unsignedmult_rg_a$D_IN = { 1'b1, obj_inp$out_a[6:0] } ;
  assign mac_obj_unsignedmult_rg_a$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_b
  assign mac_obj_unsignedmult_rg_b$D_IN = { 1'b1, obj_inp$out_b[6:0] } ;
  assign mac_obj_unsignedmult_rg_b$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s1_op_0
  assign mac_obj_unsignedmult_rg_s1_op_0$D_IN =
	     { 1'd0,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d54[7],
	       1'b0,
	       x__h12560 | y__h12561,
	       spliced_bits__h10173,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[7],
	       x__h11239 | y__h11240,
	       spliced_bits__h10232,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[1:0] } ;
  assign mac_obj_unsignedmult_rg_s1_op_0$EN = mac_obj_unsignedmult_rg_s1_val ;

  // register mac_obj_unsignedmult_rg_s1_op_1
  assign mac_obj_unsignedmult_rg_s1_op_1$D_IN =
	     { 1'd0,
	       x__h15175 | y__h15176,
	       spliced_bits__h13321,
	       1'd0,
	       x__h14078 | y__h14079,
	       spliced_bits__h13380,
	       spliced_bits__h13262 } ;
  assign mac_obj_unsignedmult_rg_s1_op_1$EN = mac_obj_unsignedmult_rg_s1_val ;

  // register mac_obj_unsignedmult_rg_s1_op_2
  assign mac_obj_unsignedmult_rg_s1_op_2$D_IN =
	     { 3'd0,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[7],
	       1'b0,
	       x__h16566 | y__h16567,
	       spliced_bits__h15868,
	       spliced_bits__h15770 } ;
  assign mac_obj_unsignedmult_rg_s1_op_2$EN = mac_obj_unsignedmult_rg_s1_val ;

  // register mac_obj_unsignedmult_rg_s1_op_3
  assign mac_obj_unsignedmult_rg_s1_op_3$D_IN =
	     { 5'd0,
	       x__h17965 | y__h17966,
	       spliced_bits__h17262,
	       spliced_bits__h17164 } ;
  assign mac_obj_unsignedmult_rg_s1_op_3$EN = mac_obj_unsignedmult_rg_s1_val ;

  // register mac_obj_unsignedmult_rg_s1_op_4
  assign mac_obj_unsignedmult_rg_s1_op_4$D_IN =
	     { 8'd0,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[6],
	       7'b0 } ;
  assign mac_obj_unsignedmult_rg_s1_op_4$EN = mac_obj_unsignedmult_rg_s1_val ;

  // register mac_obj_unsignedmult_rg_s1_val
  assign mac_obj_unsignedmult_rg_s1_val$D_IN = 1'b1 ;
  assign mac_obj_unsignedmult_rg_s1_val$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s2_op_0
  assign mac_obj_unsignedmult_rg_s2_op_0$D_IN =
	     { 1'd0,
	       mac_obj_unsignedmult_rg_s1_op_0[14],
	       mac_obj_unsignedmult_rg_s1_op_1[13],
	       mac_obj_unsignedmult_rg_s1_op_0[12:9],
	       mac_obj_unsignedmult_rg_s1_op_4[8],
	       x__h19682 | y__h19683,
	       spliced_bits__h18973,
	       mac_obj_unsignedmult_rg_s1_op_0[2:0] } ;
  assign mac_obj_unsignedmult_rg_s2_op_0$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s2_op_1
  assign mac_obj_unsignedmult_rg_s2_op_1$D_IN =
	     { 1'd0,
	       mac_obj_unsignedmult_rg_s1_op_1[14],
	       1'b0,
	       mac_obj_unsignedmult_rg_s1_op_1[12:10],
	       x__h21161 | y__h21162,
	       spliced_bits__h20437,
	       3'd0,
	       mac_obj_unsignedmult_rg_s1_op_1[1],
	       1'b0 } ;
  assign mac_obj_unsignedmult_rg_s2_op_1$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s2_op_2
  assign mac_obj_unsignedmult_rg_s2_op_2$D_IN =
	     { 3'd0,
	       mac_obj_unsignedmult_rg_s1_op_2[12],
	       x__h22543 | y__h22544,
	       spliced_bits__h21842,
	       7'd0 } ;
  assign mac_obj_unsignedmult_rg_s2_op_2$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s2_val
  assign mac_obj_unsignedmult_rg_s2_val$D_IN =
	     mac_obj_unsignedmult_rg_s1_val ;
  assign mac_obj_unsignedmult_rg_s2_val$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s3_op_0
  assign mac_obj_unsignedmult_rg_s3_op_0$D_IN =
	     { 1'd0,
	       mac_obj_unsignedmult_rg_s2_op_0[14:13],
	       x__h24651 ^ mac_obj_unsignedmult_rg_s2_op_2[12],
	       x__h24441 ^ mac_obj_unsignedmult_rg_s2_op_2[11],
	       mac_obj_unsignedmult_rg_s2_op_0_94_BIT_10_09_X_ETC___d528,
	       mac_obj_unsignedmult_rg_s2_op_0[6:0] } ;
  assign mac_obj_unsignedmult_rg_s3_op_0$EN = mac_obj_unsignedmult_rg_s3_val ;

  // register mac_obj_unsignedmult_rg_s3_op_1
  assign mac_obj_unsignedmult_rg_s3_op_1$D_IN =
	     { 1'd0,
	       mac_obj_unsignedmult_rg_s2_op_1[14],
	       mac_obj_unsignedmult_rg_s2_op_0_94_BIT_12_97_A_ETC___d552,
	       spliced_bits__h24967 } ;
  assign mac_obj_unsignedmult_rg_s3_op_1$EN = mac_obj_unsignedmult_rg_s3_val ;

  // register mac_obj_unsignedmult_rg_s3_val
  assign mac_obj_unsignedmult_rg_s3_val$D_IN = 1'b1 ;
  assign mac_obj_unsignedmult_rg_s3_val$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s4_op
  assign mac_obj_unsignedmult_rg_s4_op$D_IN =
	     { spliced_bits__h25718,
	       spliced_bits__h25748,
	       spliced_bits__h25778,
	       spliced_bits__h25808 } ;
  assign mac_obj_unsignedmult_rg_s4_op$EN = mac_obj_unsignedmult_rg_s4_val ;

  // register mac_obj_unsignedmult_rg_s4_val
  assign mac_obj_unsignedmult_rg_s4_val$D_IN =
	     mac_obj_unsignedmult_rg_s3_val ;
  assign mac_obj_unsignedmult_rg_s4_val$EN = 1'd1 ;

  // register mac_obj_unsignedmult_rg_s5_val
  assign mac_obj_unsignedmult_rg_s5_val$D_IN =
	     mac_obj_unsignedmult_rg_s4_val ;
  assign mac_obj_unsignedmult_rg_s5_val$EN = 1'd1 ;

  // register mac_out
  assign mac_out$D_IN =
	     { mac_rg_sign_s9,
	       mac_rg_exponent_s9,
	       CASE_grs1335_0b11_mac_rg_mant_s9_102_BITS_26_T_ETC__q19 } ;
  assign mac_out$EN = mac_rg_s10_valid ;

  // register mac_rg_A
  assign mac_rg_A$D_IN = obj_inp$out_a ;
  assign mac_rg_A$EN = 1'd1 ;

  // register mac_rg_B
  assign mac_rg_B$D_IN = obj_inp$out_b ;
  assign mac_rg_B$EN = 1'd1 ;

  // register mac_rg_C
  assign mac_rg_C$D_IN = obj_inp$out_c ;
  assign mac_rg_C$EN = 1'd1 ;

  // register mac_rg_C_s1
  assign mac_rg_C_s1$D_IN = mac_rg_C ;
  assign mac_rg_C_s1$EN = mac_rg_s1_valid ;

  // register mac_rg_C_s2
  assign mac_rg_C_s2$D_IN = mac_rg_C_s1 ;
  assign mac_rg_C_s2$EN = mac_rg_s2_valid ;

  // register mac_rg_C_s3
  assign mac_rg_C_s3$D_IN = mac_rg_C_s2 ;
  assign mac_rg_C_s3$EN = mac_rg_s3_valid ;

  // register mac_rg_C_s4
  assign mac_rg_C_s4$D_IN = mac_rg_C_s3 ;
  assign mac_rg_C_s4$EN = mac_rg_s4_valid ;

  // register mac_rg_C_s5
  assign mac_rg_C_s5$D_IN =
	     IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d802 ?
	       mul_result__h31239 :
	       mac_rg_C_s4 ;
  assign mac_rg_C_s5$EN = mac_rg_s5_valid ;

  // register mac_rg_C_s6
  assign mac_rg_C_s6$D_IN =
	     (mac_rg_mult_s5[30:23] != 8'd255 &&
	      mac_rg_C_s5[30:23] != 8'd255) ?
	       ((mac_rg_mult_s5[30:23] != 8'd0 ||
		 mac_rg_C_s5[30:23] != 8'd0) ?
		  mac_rg_C_s5 :
		  x__h32089) :
	       x__h32391 ;
  assign mac_rg_C_s6$EN = mac_rg_s6_valid ;

  // register mac_rg_C_s7
  assign mac_rg_C_s7$D_IN = mac_rg_C_s6 ;
  assign mac_rg_C_s7$EN = mac_rg_s7_valid ;

  // register mac_rg_exception_s1
  assign mac_rg_exception_s1$D_IN =
	     (mac_rg_A[14:7] == 8'd255 && mac_rg_B[14:7] == 8'd0 ||
	      mac_rg_A[14:7] == 8'd0 && mac_rg_B[14:7] == 8'd255) ?
	       2'd0 :
	       ((mac_rg_A[14:7] == 8'd0 || mac_rg_B[14:7] == 8'd0) ?
		  2'd1 :
		  ((mac_rg_A[14:7] == 8'd255 || mac_rg_B[14:7] == 8'd255) ?
		     2'd2 :
		     2'd3)) ;
  assign mac_rg_exception_s1$EN = mac_rg_s1_valid ;

  // register mac_rg_exception_s2
  assign mac_rg_exception_s2$D_IN = mac_rg_exception_s1 ;
  assign mac_rg_exception_s2$EN = mac_rg_s2_valid ;

  // register mac_rg_exception_s3
  assign mac_rg_exception_s3$D_IN = mac_rg_exception_s2 ;
  assign mac_rg_exception_s3$EN = mac_rg_s3_valid ;

  // register mac_rg_exception_s4
  assign mac_rg_exception_s4$D_IN = mac_rg_exception_s3 ;
  assign mac_rg_exception_s4$EN = mac_rg_s4_valid ;

  // register mac_rg_exception_s6
  assign mac_rg_exception_s6$D_IN =
	     (mac_rg_mult_s5[30:23] != 8'd255 &&
	      mac_rg_C_s5[30:23] != 8'd255) ?
	       2'd0 :
	       x__h32550 ;
  assign mac_rg_exception_s6$EN = mac_rg_s6_valid ;

  // register mac_rg_exception_s7
  assign mac_rg_exception_s7$D_IN = mac_rg_exception_s6 ;
  assign mac_rg_exception_s7$EN = mac_rg_s7_valid ;

  // register mac_rg_exception_s8
  assign mac_rg_exception_s8$D_IN = mac_rg_exception_s7 ;
  assign mac_rg_exception_s8$EN = mac_rg_s8_valid ;

  // register mac_rg_exp_add_s1
  assign mac_rg_exp_add_s1$D_IN =
	     (mac_rg_A[14:7] == 8'd255 && mac_rg_B[14:7] == 8'd0 ||
	      mac_rg_A[14:7] == 8'd0 && mac_rg_B[14:7] == 8'd255) ?
	       8'd255 :
	       y_avValue_snd__h30397 ;
  assign mac_rg_exp_add_s1$EN = mac_rg_s1_valid ;

  // register mac_rg_exp_add_s2
  assign mac_rg_exp_add_s2$D_IN = mac_rg_exp_add_s1 ;
  assign mac_rg_exp_add_s2$EN = mac_rg_s2_valid ;

  // register mac_rg_exp_add_s3
  assign mac_rg_exp_add_s3$D_IN = mac_rg_exp_add_s2 ;
  assign mac_rg_exp_add_s3$EN = mac_rg_s3_valid ;

  // register mac_rg_exp_add_s4
  assign mac_rg_exp_add_s4$D_IN = mac_rg_exp_add_s3 ;
  assign mac_rg_exp_add_s4$EN = mac_rg_s4_valid ;

  // register mac_rg_exp_diff_s6
  assign mac_rg_exp_diff_s6$D_IN =
	     (mac_rg_mult_s5[30:23] != 8'd255 &&
	      mac_rg_C_s5[30:23] != 8'd255) ?
	       exp_diff_s6__h31866 :
	       8'd255 ;
  assign mac_rg_exp_diff_s6$EN = mac_rg_s6_valid ;

  // register mac_rg_exp_diff_s7
  assign mac_rg_exp_diff_s7$D_IN = mac_rg_exp_diff_s6 ;
  assign mac_rg_exp_diff_s7$EN = mac_rg_s7_valid ;

  // register mac_rg_exponent_s8
  assign mac_rg_exponent_s8$D_IN = mac_rg_mult_s7[30:23] ;
  assign mac_rg_exponent_s8$EN = mac_rg_s8_valid ;

  // register mac_rg_exponent_s9
  assign mac_rg_exponent_s9$D_IN =
	     (mac_rg_exception_s8 == 2'b0) ?
	       IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1070 :
	       8'd255 ;
  assign mac_rg_exponent_s9$EN = mac_rg_s9_valid ;

  // register mac_rg_mant_s8
  assign mac_rg_mant_s8$D_IN =
	     IF_mac_rg_mult_s7_64_BIT_31_65_XOR_mac_rg_C_s7_ETC___d875[27:0] ;
  assign mac_rg_mant_s8$EN = mac_rg_s8_valid ;

  // register mac_rg_mant_s9
  always@(mac_rg_exception_s8 or
	  IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1061)
  begin
    case (mac_rg_exception_s8)
      2'b0:
	  mac_rg_mant_s9$D_IN =
	      IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1061;
      2'b01: mac_rg_mant_s9$D_IN = 27'd67108864;
      default: mac_rg_mant_s9$D_IN = 27'd0;
    endcase
  end
  assign mac_rg_mant_s9$EN = mac_rg_s9_valid ;

  // register mac_rg_mant_shift_s7
  assign mac_rg_mant_shift_s7$D_IN = x__h32826 >> mac_rg_exp_diff_s6 ;
  assign mac_rg_mant_shift_s7$EN = mac_rg_s7_valid ;

  // register mac_rg_mult_mant_s7
  assign mac_rg_mult_mant_s7$D_IN = { 1'b1, mac_rg_mult_s6[22:0], 3'b0 } ;
  assign mac_rg_mult_mant_s7$EN = mac_rg_s7_valid ;

  // register mac_rg_mult_s5
  assign mac_rg_mult_s5$D_IN =
	     IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d802 ?
	       mac_rg_C_s4 :
	       mul_result__h31239 ;
  assign mac_rg_mult_s5$EN = mac_rg_s5_valid ;

  // register mac_rg_mult_s6
  assign mac_rg_mult_s6$D_IN =
	     (mac_rg_mult_s5[30:23] != 8'd255 &&
	      mac_rg_C_s5[30:23] != 8'd255) ?
	       ((mac_rg_mult_s5[30:23] != 8'd0 ||
		 mac_rg_C_s5[30:23] != 8'd0) ?
		  mac_rg_mult_s5 :
		  x__h32035) :
	       x__h32148 ;
  assign mac_rg_mult_s6$EN = mac_rg_s6_valid ;

  // register mac_rg_mult_s7
  assign mac_rg_mult_s7$D_IN = mac_rg_mult_s6 ;
  assign mac_rg_mult_s7$EN = mac_rg_s7_valid ;

  // register mac_rg_out_valid
  assign mac_rg_out_valid$D_IN = mac_rg_s10_valid ;
  assign mac_rg_out_valid$EN = 1'd1 ;

  // register mac_rg_s10_valid
  assign mac_rg_s10_valid$D_IN = mac_rg_s9_valid ;
  assign mac_rg_s10_valid$EN = 1'd1 ;

  // register mac_rg_s1_valid
  assign mac_rg_s1_valid$D_IN = 1'b1 ;
  assign mac_rg_s1_valid$EN = 1'd1 ;

  // register mac_rg_s2_valid
  assign mac_rg_s2_valid$D_IN = mac_rg_s1_valid ;
  assign mac_rg_s2_valid$EN = 1'd1 ;

  // register mac_rg_s3_valid
  assign mac_rg_s3_valid$D_IN = mac_rg_s2_valid ;
  assign mac_rg_s3_valid$EN = 1'd1 ;

  // register mac_rg_s4_valid
  assign mac_rg_s4_valid$D_IN = mac_rg_s3_valid ;
  assign mac_rg_s4_valid$EN = 1'd1 ;

  // register mac_rg_s5_valid
  assign mac_rg_s5_valid$D_IN = mac_rg_s4_valid ;
  assign mac_rg_s5_valid$EN = 1'd1 ;

  // register mac_rg_s6_valid
  assign mac_rg_s6_valid$D_IN = mac_rg_s5_valid ;
  assign mac_rg_s6_valid$EN = 1'd1 ;

  // register mac_rg_s7_valid
  assign mac_rg_s7_valid$D_IN = mac_rg_s6_valid ;
  assign mac_rg_s7_valid$EN = 1'd1 ;

  // register mac_rg_s8_valid
  assign mac_rg_s8_valid$D_IN = mac_rg_s7_valid ;
  assign mac_rg_s8_valid$EN = 1'd1 ;

  // register mac_rg_s9_valid
  assign mac_rg_s9_valid$D_IN = mac_rg_s8_valid ;
  assign mac_rg_s9_valid$EN = 1'd1 ;

  // register mac_rg_sign_s1
  assign mac_rg_sign_s1$D_IN = mac_rg_A[15] ^ mac_rg_B[15] ;
  assign mac_rg_sign_s1$EN = mac_rg_s1_valid ;

  // register mac_rg_sign_s2
  assign mac_rg_sign_s2$D_IN = mac_rg_sign_s1 ;
  assign mac_rg_sign_s2$EN = mac_rg_s2_valid ;

  // register mac_rg_sign_s3
  assign mac_rg_sign_s3$D_IN = mac_rg_sign_s2 ;
  assign mac_rg_sign_s3$EN = mac_rg_s3_valid ;

  // register mac_rg_sign_s4
  assign mac_rg_sign_s4$D_IN = mac_rg_sign_s3 ;
  assign mac_rg_sign_s4$EN = mac_rg_s4_valid ;

  // register mac_rg_sign_s8
  assign mac_rg_sign_s8$D_IN =
	     mac_rg_mult_mant_s7_59_ULE_mac_rg_mant_shift_s_ETC___d861 ?
	       mac_rg_C_s7[31] :
	       mac_rg_mult_s7[31] ;
  assign mac_rg_sign_s8$EN = mac_rg_s8_valid ;

  // register mac_rg_sign_s9
  assign mac_rg_sign_s9$D_IN = mac_rg_sign_s8 ;
  assign mac_rg_sign_s9$EN = mac_rg_s9_valid ;

  // register mac_round_bit_s9
  assign mac_round_bit_s9$D_IN =
	     mac_rg_exception_s8 == 2'b0 &&
	     ((mac_rg_mant_s8[27:26] == 2'b0) ?
		mantissa__h33337[2] :
		(mac_rg_mant_s8[27] ?
		   mac_rg_mant_s8[3] :
		   mac_rg_mant_s8[2])) ;
  assign mac_round_bit_s9$EN = mac_rg_s9_valid ;

  // register mac_sticky_bit_s9
  assign mac_sticky_bit_s9$D_IN =
	     mac_rg_exception_s8 == 2'b0 &&
	     IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1088 ;
  assign mac_sticky_bit_s9$EN = mac_rg_s9_valid ;

  // register macs1
  assign macs1$D_IN = rg_macf ;
  assign macs1$EN = 1'd1 ;

  // register macs10
  assign macs10$D_IN = macs9 ;
  assign macs10$EN = 1'd1 ;

  // register macs2
  assign macs2$D_IN = macs1 ;
  assign macs2$EN = 1'd1 ;

  // register macs3
  assign macs3$D_IN = macs2 ;
  assign macs3$EN = 1'd1 ;

  // register macs4
  assign macs4$D_IN = macs3 ;
  assign macs4$EN = 1'd1 ;

  // register macs5
  assign macs5$D_IN = macs4 ;
  assign macs5$EN = 1'd1 ;

  // register macs6
  assign macs6$D_IN = macs5 ;
  assign macs6$EN = 1'd1 ;

  // register macs7
  assign macs7$D_IN = macs6 ;
  assign macs7$EN = 1'd1 ;

  // register macs8
  assign macs8$D_IN = macs7 ;
  assign macs8$EN = 1'd1 ;

  // register macs9
  assign macs9$D_IN = macs8 ;
  assign macs9$EN = 1'd1 ;

  // register rg_a
  assign rg_a$D_IN = 16'h0 ;
  assign rg_a$EN = 1'b0 ;

  // register rg_af
  assign rg_af$D_IN = { obj_inp$out_a, 16'd0 } ;
  assign rg_af$EN = 1'd1 ;

  // register rg_b
  assign rg_b$D_IN = 16'h0 ;
  assign rg_b$EN = 1'b0 ;

  // register rg_bf
  assign rg_bf$D_IN = { obj_inp$out_b, 16'd0 } ;
  assign rg_bf$EN = 1'd1 ;

  // register rg_c
  assign rg_c$D_IN = 32'h0 ;
  assign rg_c$EN = 1'b0 ;

  // register rg_cf
  assign rg_cf$D_IN = obj_inp$out_c ;
  assign rg_cf$EN = 1'd1 ;

  // register rg_macf
  assign rg_macf$D_IN = obj_inp$out_mac ;
  assign rg_macf$EN = 1'd1 ;

  // register rg_r
  assign rg_r$D_IN = 1'b0 ;
  assign rg_r$EN = 1'b0 ;

  // submodule obj_inp
  assign obj_inp$read = 1'b1 ;
  assign obj_inp$EN = 1'd1 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_3_ETC__q8 =
	     _0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_30_T_ETC___d1477 ?
	       _theResult___snd__h53571 :
	       _theResult___snd__h53566 ;
  assign IF_0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_T_ETC__q15 =
	     _0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_2_ETC___d1809 ?
	       _theResult___snd__h65258 :
	       _theResult___snd__h65253 ;
  assign IF_0b0_CONCAT_NOT_IF_NOT_IF_as10_173_BITS_30_T_ETC___d1955 =
	     sfd__h65288[24] ?
	       ((_theResult___snd_fst_exp__h65187 == 8'd254) ?
		  31'h7F800000 :
		  { din_inc___2_exp__h65808, sfd__h65288[23:1] }) :
	       { IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1864,
		 sfd__h65288[22:0] } ;
  assign IF_0b0_CONCAT_NOT_IF_NOT_as10_173_BITS_30_TO_2_ETC___d1936 =
	     sfd__h53601[24] ?
	       ((_theResult___snd_fst_exp__h53500 == 8'd254) ?
		  31'h7F800000 :
		  { din_inc___2_exp__h54109, sfd__h53601[23:1] }) :
	       { IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1532,
		 sfd__h53601[22:0] } ;
  assign IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277 =
	     (din_exp__h53409 == 8'd0) ?
	       9'd386 :
	       { din_exp3409_MINUS_127__q7[7], din_exp3409_MINUS_127__q7 } ;
  assign IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1474 =
	     (sfdres__h45089[47] ?
		6'd0 :
		(sfdres__h45089[46] ?
		   6'd1 :
		   (sfdres__h45089[45] ?
		      6'd2 :
		      (sfdres__h45089[44] ?
			 6'd3 :
			 (sfdres__h45089[43] ?
			    6'd4 :
			    (sfdres__h45089[42] ?
			       6'd5 :
			       (sfdres__h45089[41] ?
				  6'd6 :
				  (sfdres__h45089[40] ?
				     6'd7 :
				     (sfdres__h45089[39] ?
					6'd8 :
					(sfdres__h45089[38] ?
					   6'd9 :
					   (sfdres__h45089[37] ?
					      6'd10 :
					      (sfdres__h45089[36] ?
						 6'd11 :
						 (sfdres__h45089[35] ?
						    6'd12 :
						    (sfdres__h45089[34] ?
						       6'd13 :
						       (sfdres__h45089[33] ?
							  6'd14 :
							  (sfdres__h45089[32] ?
							     6'd15 :
							     (sfdres__h45089[31] ?
								6'd16 :
								(sfdres__h45089[30] ?
								   6'd17 :
								   (sfdres__h45089[29] ?
								      6'd18 :
								      (sfdres__h45089[28] ?
									 6'd19 :
									 (sfdres__h45089[27] ?
									    6'd20 :
									    (sfdres__h45089[26] ?
									       6'd21 :
									       (sfdres__h45089[25] ?
										  6'd22 :
										  (sfdres__h45089[24] ?
										     6'd23 :
										     (sfdres__h45089[23] ?
											6'd24 :
											(sfdres__h45089[22] ?
											   6'd25 :
											   (sfdres__h45089[21] ?
											      6'd26 :
											      (sfdres__h45089[20] ?
												 6'd27 :
												 (sfdres__h45089[19] ?
												    6'd28 :
												    (sfdres__h45089[18] ?
												       6'd29 :
												       (sfdres__h45089[17] ?
													  6'd30 :
													  (sfdres__h45089[16] ?
													     6'd31 :
													     (sfdres__h45089[15] ?
														6'd32 :
														(sfdres__h45089[14] ?
														   6'd33 :
														   (sfdres__h45089[13] ?
														      6'd34 :
														      (sfdres__h45089[12] ?
															 6'd35 :
															 (sfdres__h45089[11] ?
															    6'd36 :
															    (sfdres__h45089[10] ?
															       6'd37 :
															       (sfdres__h45089[9] ?
																  6'd38 :
																  (sfdres__h45089[8] ?
																     6'd39 :
																     (sfdres__h45089[7] ?
																	6'd40 :
																	(sfdres__h45089[6] ?
																	   6'd41 :
																	   (sfdres__h45089[5] ?
																	      6'd42 :
																	      (sfdres__h45089[4] ?
																		 6'd43 :
																		 (sfdres__h45089[3] ?
																		    6'd44 :
																		    (sfdres__h45089[2] ?
																		       6'd45 :
																		       (sfdres__h45089[1] ?
																			  6'd46 :
																			  (sfdres__h45089[0] ?
																			     6'd47 :
																			     6'd48)))))))))))))))))))))))))))))))))))))))))))))))) -
	     6'd1 ;
  assign IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1476 =
	     IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277 -
	     9'd386 ;
  assign IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1932 =
	     (sfdres__h45089[47] &&
	      IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277 ==
	      9'd127) ?
	       31'h7F7FFFFF :
	       { _theResult___fst_exp__h53491, sfdin__h53485[47:25] } ;
  assign IF_IF_IF_IF_mac_rg_mant_s8_81_BIT_25_85_THEN_0_ETC___d979 =
	     (spliced_bits__h33730[3] & spliced_bits__h33701[3]) ?
	       5'b10000 :
	       ((~spliced_bits__h33730[3]) ?
		  { 1'b0, spliced_bits__h33730 } :
		  { 2'b01, spliced_bits__h33701[2:0] }) ;
  assign IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1806 =
	     (sfdin__h60194[27] ?
		5'd0 :
		(sfdin__h60194[26] ?
		   5'd1 :
		   (sfdin__h60194[25] ?
		      5'd2 :
		      (sfdin__h60194[24] ?
			 5'd3 :
			 (sfdin__h60194[23] ?
			    5'd4 :
			    (sfdin__h60194[22] ?
			       5'd5 :
			       (sfdin__h60194[21] ?
				  5'd6 :
				  (sfdin__h60194[20] ?
				     5'd7 :
				     (sfdin__h60194[19] ?
					5'd8 :
					(sfdin__h60194[18] ?
					   5'd9 :
					   (sfdin__h60194[17] ?
					      5'd10 :
					      (sfdin__h60194[16] ?
						 5'd11 :
						 (sfdin__h60194[15] ?
						    5'd12 :
						    (sfdin__h60194[14] ?
						       5'd13 :
						       (sfdin__h60194[13] ?
							  5'd14 :
							  (sfdin__h60194[12] ?
							     5'd15 :
							     (sfdin__h60194[11] ?
								5'd16 :
								(sfdin__h60194[10] ?
								   5'd17 :
								   (sfdin__h60194[9] ?
								      5'd18 :
								      (sfdin__h60194[8] ?
									 5'd19 :
									 (sfdin__h60194[7] ?
									    5'd20 :
									    (sfdin__h60194[6] ?
									       5'd21 :
									       (sfdin__h60194[5] ?
										  5'd22 :
										  (sfdin__h60194[4] ?
										     5'd23 :
										     (sfdin__h60194[3] ?
											5'd24 :
											(sfdin__h60194[2] ?
											   5'd25 :
											   (sfdin__h60194[1] ?
											      5'd26 :
											      (sfdin__h60194[0] ?
												 5'd27 :
												 5'd28)))))))))))))))))))))))))))) -
	     5'd1 ;
  assign IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1951 =
	     (sfdin__h60194[27] &&
	      IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 ==
	      9'd127) ?
	       31'h7F7FFFFF :
	       { _theResult___fst_exp__h65178, sfdin__h65172[27:5] } ;
  assign IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1864 =
	     (_theResult___snd_fst_exp__h65187 == 8'd0 &&
	      sfd__h65288[24:23] == 2'b01) ?
	       8'd1 :
	       _theResult___snd_fst_exp__h65187 ;
  assign IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1959 =
	     (_theResult___snd_fst_exp__h65187 == 8'd255 ||
	      guard__h60181 == 2'b0 ||
	      guard__h60181 == 2'b01) ?
	       IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1951 :
	       IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1958 ;
  assign IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1679 =
	     (diff__h43927 < 8'd28) ?
	       result__h60789 :
	       ((IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1666 ==
		 27'd0) ?
		  opB__h43923 :
		  28'd1) ;
  assign IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 =
	     (din_exp__h65124 == 8'd0) ?
	       9'd386 :
	       { din_exp5124_MINUS_127__q14[7], din_exp5124_MINUS_127__q14 } ;
  assign IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1808 =
	     IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 -
	     9'd386 ;
  assign IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1532 =
	     (_theResult___snd_fst_exp__h53500 == 8'd0 &&
	      sfd__h53601[24:23] == 2'b01) ?
	       8'd1 :
	       _theResult___snd_fst_exp__h53500 ;
  assign IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1647 =
	     (_theResult___snd_fst_exp__h53500 == 8'd255 ||
	      guard__h45411 == 2'b0 ||
	      guard__h45411 == 2'b01 ||
	      guard__h45411 == 2'b10) ?
	       NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1250 &&
	       NOT_as10_173_BIT_31_631_EQ_bs10_183_BIT_31_632_ETC___d1637 :
	       guard__h45411 == 2'b11 &&
	       NOT_as10_173_BIT_31_631_EQ_bs10_183_BIT_31_632_ETC___d1637 ;
  assign IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1940 =
	     (_theResult___snd_fst_exp__h53500 == 8'd255 ||
	      guard__h45411 == 2'b0 ||
	      guard__h45411 == 2'b01) ?
	       IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1932 :
	       IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1939 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1589 =
	     (x__h59472 == 8'd255 && x__h54130 == 23'd0 &&
	      cs10[30:23] == 8'd255 &&
	      cs10[22:0] == 23'd0) ?
	       8'd255 :
	       ((x__h59472 == 8'd255 && x__h54130 == 23'd0) ?
		  x__h59472 :
		  cs10[30:23]) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1591 =
	     (x__h59472 == 8'd255 && x__h54130[22]) ?
	       x__h59472 :
	       ((cs10[30:23] == 8'd255 && cs10[22]) ?
		  cs10[30:23] :
		  IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1589) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1593 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22]) ?
	       x__h59472 :
	       ((cs10[30:23] == 8'd255 && cs10[22:0] != 23'd0 && !cs10[22]) ?
		  cs10[30:23] :
		  IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1591) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1616 =
	     (x__h59472 == 8'd0) ?
	       10'd898 :
	       { {2{x9472_MINUS_127__q13[7]}}, x9472_MINUS_127__q13 } ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1871 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22] ||
	      cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_NOT__ETC___d1585) ?
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1593 :
	       _theResult___fst_exp__h65759 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1878 =
	     IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1651 ?
	       23'd0 :
	       23'd4194304 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1880 =
	     (x__h59472 == 8'd255 && x__h54130 == 23'd0 &&
	      cs10[30:23] == 8'd255 &&
	      cs10[22:0] == 23'd0) ?
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1878 :
	       ((x__h59472 == 8'd255 && x__h54130 == 23'd0) ?
		  x__h54130 :
		  cs10[22:0]) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1884 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22]) ?
	       sfd__h60165 :
	       IF_cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_N_ETC___d1883 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1893 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22] ||
	      cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_NOT__ETC___d1585) ?
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1884 :
	       _theResult___fst_sfd__h65760 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1907 =
	     (x__h59472 == 8'd255 && x__h54130 == 23'd0) ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 :
	       cs10[31] ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1908 =
	     (x__h59472 == 8'd255 && x__h54130 == 23'd0 &&
	      cs10[30:23] == 8'd255 &&
	      cs10[22:0] == 23'd0) ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1651 &&
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 :
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1907 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1910 =
	     (x__h59472 == 8'd255 && x__h54130[22]) ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 :
	       ((cs10[30:23] == 8'd255 && cs10[22]) ?
		  cs10[31] :
		  IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1908) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1912 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22]) ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 :
	       ((cs10[30:23] == 8'd255 && cs10[22:0] != 23'd0 && !cs10[22]) ?
		  cs10[31] :
		  IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1910) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1918 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22] ||
	      cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_NOT__ETC___d1585) ?
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1912 :
	       ((_theResult___snd_fst_exp__h65187 == 8'd255 ||
		 guard__h60181 == 2'b0 ||
		 guard__h60181 == 2'b01 ||
		 guard__h60181 == 2'b10) ?
		  IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1915 :
		  guard__h60181 == 2'b11 &&
		  IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1915) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1944 =
	     (x__h59472 == 8'd255 && x__h54130 == 23'd0) ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1941 :
	       cs10[30:0] ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1945 =
	     (x__h59472 == 8'd255 && x__h54130 == 23'd0 &&
	      cs10[30:23] == 8'd255 &&
	      cs10[22:0] == 23'd0) ?
	       { 8'd255,
		 IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1878 } :
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1944 ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1947 =
	     (x__h59472 == 8'd255 && x__h54130[22]) ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1941 :
	       ((cs10[30:23] == 8'd255 && cs10[22]) ?
		  cs10[30:0] :
		  IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1945) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1949 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22]) ?
	       { x__h59472, sfd__h60165 } :
	       ((cs10[30:23] == 8'd255 && cs10[22:0] != 23'd0 && !cs10[22]) ?
		  { cs10[30:23], sfd__h60168 } :
		  IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1947) ;
  assign IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1960 =
	     (x__h59472 == 8'd255 && x__h54130 != 23'd0 && !x__h54130[22] ||
	      cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_NOT__ETC___d1585) ?
	       IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1949 :
	       IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1959 ;
  assign IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1666 =
	     { NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
		 x__h59472 != 8'd0 :
		 cs10[30:23] != 8'd0,
	       NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
		 x__h54130 :
		 cs10[22:0],
	       3'b0 } ;
  assign IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1915 =
	     NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
	       cs10[31] :
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1209 =
	     ((as10[30:23] == 8'd0) ?
		10'd898 :
		{ {2{as10_BITS_30_TO_23_MINUS_127__q5[7]}},
		  as10_BITS_30_TO_23_MINUS_127__q5 }) +
	     ((bs10[30:23] == 8'd0) ?
		10'd898 :
		{ {2{bs10_BITS_30_TO_23_MINUS_127__q6[7]}},
		  bs10_BITS_30_TO_23_MINUS_127__q6 }) ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1210 =
	     (IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1209 ^
	      10'h200) <=
	     10'd639 ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1212 =
	     (IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1209 ^
	      10'h200) <
	     10'd361 ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1226 =
	     (as10[30:23] == 8'd255 && as10[22:0] != 23'd0 && !as10[22]) ?
	       as10[30:23] :
	       ((bs10[30:23] == 8'd255 && bs10[22:0] != 23'd0 && !bs10[22]) ?
		  bs10[30:23] :
		  IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1224) ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1552 =
	     (as10[30:23] == 8'd255 && as10[22:0] != 23'd0 && !as10[22]) ?
	       sfd__h45110 :
	       ((bs10[30:23] == 8'd255 && bs10[22:0] != 23'd0 && !bs10[22]) ?
		  sfd__h45113 :
		  IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1550) ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 =
	     as10_173_BITS_30_TO_23_174_EQ_255_175_AND_NOT__ETC___d1219 ?
	       ((as10[30:23] == 8'd255 && as10[22:0] != 23'd0 && !as10[22]) ?
		  as10[31] :
		  IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_N_ETC___d1641) :
	       IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1647 ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1651 =
	     IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 ==
	     cs10[31] ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1941 =
	     as10_173_BITS_30_TO_23_174_EQ_255_175_AND_NOT__ETC___d1219 ?
	       ((as10[30:23] == 8'd255 && as10[22:0] != 23'd0 && !as10[22]) ?
		  { as10[30:23], sfd__h45110 } :
		  IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_N_ETC___d1929) :
	       IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1940 ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1222 =
	     (as10[30:23] == 8'd255 && as10[22:0] == 23'd0 ||
	      bs10[30:23] == 8'd255 && bs10[22:0] == 23'd0) ?
	       8'd255 :
	       ((as10[30:23] == 8'd0 && as10[22:0] == 23'd0 ||
		 bs10[30:23] == 8'd0 && bs10[22:0] == 23'd0 ||
		 IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1210) ?
		  8'd0 :
		  8'd255) ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1224 =
	     (as10[30:23] == 8'd255 && as10[22]) ?
	       as10[30:23] :
	       ((bs10[30:23] == 8'd255 && bs10[22]) ?
		  bs10[30:23] :
		  IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1222) ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1548 =
	     (as10[30:23] == 8'd255 && as10[22:0] == 23'd0 &&
	      bs10[30:23] == 8'd0 &&
	      bs10[22:0] == 23'd0 ||
	      as10[30:23] == 8'd0 && as10[22:0] == 23'd0 &&
	      bs10[30:23] == 8'd255 &&
	      bs10[22:0] == 23'd0) ?
	       23'd4194304 :
	       23'd0 ;
  assign IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1550 =
	     (as10[30:23] == 8'd255 && as10[22]) ?
	       as10[22:0] :
	       ((bs10[30:23] == 8'd255 && bs10[22]) ?
		  bs10[22:0] :
		  IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1548) ;
  assign IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_N_ETC___d1641 =
	     (bs10[30:23] == 8'd255 && bs10[22:0] != 23'd0 && !bs10[22]) ?
	       bs10[31] :
	       ((as10[30:23] == 8'd255 && as10[22]) ?
		  as10[31] :
		  IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_b_ETC___d1639) ;
  assign IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_N_ETC___d1929 =
	     (bs10[30:23] == 8'd255 && bs10[22:0] != 23'd0 && !bs10[22]) ?
	       { bs10[30:23], sfd__h45113 } :
	       ((as10[30:23] == 8'd255 && as10[22]) ?
		  as10[30:0] :
		  ((bs10[30:23] == 8'd255 && bs10[22]) ?
		     bs10[30:0] :
		     { IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1222,
		       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_a_ETC___d1548 })) ;
  assign IF_bs10_183_BITS_30_TO_23_184_EQ_255_185_AND_b_ETC___d1639 =
	     (bs10[30:23] == 8'd255 && bs10[22]) ?
	       bs10[31] :
	       (as10[30:23] != 8'd255 || as10[22:0] != 23'd0 ||
		bs10[30:23] != 8'd0 ||
		bs10[22:0] != 23'd0) &&
	       (as10[30:23] != 8'd0 || as10[22:0] != 23'd0 ||
		bs10[30:23] != 8'd255 ||
		bs10[22:0] != 23'd0) &&
	       NOT_as10_173_BIT_31_631_EQ_bs10_183_BIT_31_632_ETC___d1637 ;
  assign IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THEN_89_ETC___d1612 =
	     (cs10[30:23] == 8'd0) ?
	       10'd898 :
	       { {2{cs10_BITS_30_TO_23_MINUS_127__q12[7]}},
		 cs10_BITS_30_TO_23_MINUS_127__q12 } ;
  assign IF_cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_N_ETC___d1883 =
	     (cs10[30:23] == 8'd255 && cs10[22:0] != 23'd0 && !cs10[22]) ?
	       sfd__h60168 :
	       ((x__h59472 == 8'd255 && x__h54130[22]) ?
		  x__h54130 :
		  ((cs10[30:23] == 8'd255 && cs10[22]) ?
		     cs10[22:0] :
		     IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1880)) ;
  assign IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755 =
	     mac_obj_unsignedmult_rg_s5_val ?
	       mac_obj_unsignedmult_rg_s4_op :
	       16'd0 ;
  assign IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d798 =
	     (mac_rg_exception_s1 == 2'd3) ?
	       { _theResult_____1__h31349,
		 IF_theResult_____11349_EQ_255_THEN_0_ELSE_IF_I_ETC__q2[22:0] } :
	       { CASE_mac_rg_exception_s1_1_0_2_255_255__q3,
		 CASE_mac_rg_exception_s1_1_0_2_0_4194304__q4 } ;
  assign IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d802 =
	     IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d798[30:23] <
	     mac_rg_C_s4[30:23] ;
  assign IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1061 =
	     (mac_rg_mant_s8[27:26] == 2'b0) ?
	       x__h33408 :
	       (mac_rg_mant_s8[27] ? mac_rg_mant_s8[26:0] : x__h40065) ;
  assign IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1070 =
	     (mac_rg_mant_s8[27:26] == 2'b0) ?
	       exponent__h33336 :
	       (mac_rg_mant_s8[27] ? exponent__h33365 : mac_rg_exponent_s8) ;
  assign IF_mac_rg_mant_s8_81_BITS_27_TO_26_82_EQ_0b0_8_ETC___d1088 =
	     (mac_rg_mant_s8[27:26] == 2'b0) ?
	       x__h40368 :
	       (mac_rg_mant_s8[27] ? x__h40655 : x__h40921) ;
  assign IF_mac_rg_mult_s7_64_BIT_31_65_XOR_mac_rg_C_s7_ETC___d875 =
	     (mac_rg_mult_s7[31] ^ mac_rg_C_s7[31]) ?
	       a_temp__h32978 - b_temp__h32979 :
	       a_temp__h32978 + b_temp__h32979 ;
  assign IF_sfdin3485_BIT_24_THEN_2_ELSE_0__q9 =
	     sfdin__h53485[24] ? 2'd2 : 2'd0 ;
  assign IF_sfdin5172_BIT_4_THEN_2_ELSE_0__q16 =
	     sfdin__h65172[4] ? 2'd2 : 2'd0 ;
  assign IF_theResult_____11349_EQ_255_THEN_0_ELSE_IF_I_ETC__q2 =
	     (_theResult_____1__h31349 == 8'd255) ?
	       24'd0 :
	       { IF_IF_IF_mac_obj_unsignedmult_rg_s5_val_53_THE_ETC___d778[7:0],
		 16'd0 } ;
  assign IF_x6479_OR_y6480_THEN_1_ELSE_0__q1 =
	     (x__h26479 | y__h26480) ? 4'd1 : 4'd0 ;
  assign NOT_IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1905 =
	     IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1871 !=
	     8'd0 ||
	     IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1893 !=
	     23'd0 ||
	     NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_A_ETC___d1902 ||
	     (NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
		cs10_568_BIT_31_630_EQ_IF_as10_173_BITS_30_TO__ETC___d1649 :
		IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1651) ;
  assign NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_A_ETC___d1897 =
	     (x__h59472 != 8'd255 || x__h54130 == 23'd0 || x__h54130[22]) &&
	     NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607 &&
	     sfdin__h60194[27] &&
	     IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 ==
	     9'd127 ;
  assign NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_A_ETC___d1902 =
	     (x__h59472 != 8'd255 || x__h54130 == 23'd0 || x__h54130[22]) &&
	     NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607 &&
	     NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_A_ETC___d1897 |
	     (_theResult___snd_fst_exp__h65187 != 8'd255 &&
	      guard__h60181 != 2'b0) ;
  assign NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 =
	     (IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THEN_89_ETC___d1612 ^
	      10'h200) >
	     (IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1616 ^
	      10'h200) ||
	     IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THEN_89_ETC___d1612 ==
	     IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1616 &&
	     sfdB__h43942 > sfdA__h43941 ;
  assign NOT_IF_mac_rg_out_valid_159_THEN_mac_out_160_E_ETC___d1166 =
	     mac_result__h43647[30:23] != macs10[30:23] ;
  assign NOT_as10_173_BITS_30_TO_23_174_EQ_0_198_238_CO_ETC___d1258 =
	     sfdres__h43985 >>
	     _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1251 ;
  assign NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1246 =
	     (as10[30:23] != 8'd255 || as10[22:0] != 23'd0) &&
	     (bs10[30:23] != 8'd255 || bs10[22:0] != 23'd0) &&
	     (as10[30:23] != 8'd0 || as10[22:0] != 23'd0) &&
	     (bs10[30:23] != 8'd0 || bs10[22:0] != 23'd0) &&
	     IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1210 &&
	     !IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1212 ;
  assign NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1250 =
	     (as10[30:23] != 8'd255 || as10[22:0] == 23'd0 || as10[22]) &&
	     (bs10[30:23] != 8'd255 || bs10[22:0] == 23'd0 || bs10[22]) &&
	     (as10[30:23] != 8'd255 || !as10[22]) &&
	     (bs10[30:23] != 8'd255 || !bs10[22]) &&
	     NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1246 ;
  assign NOT_as10_173_BIT_31_631_EQ_bs10_183_BIT_31_632_ETC___d1637 =
	     as10[31] != bs10[31] ;
  assign NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607 =
	     (cs10[30:23] != 8'd255 || cs10[22:0] == 23'd0 || cs10[22]) &&
	     (x__h59472 != 8'd255 || !x__h54130[22]) &&
	     (cs10[30:23] != 8'd255 || !cs10[22]) &&
	     (x__h59472 != 8'd255 || x__h54130 != 23'd0) &&
	     (cs10[30:23] != 8'd255 || cs10[22:0] != 23'd0) ;
  assign _0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_30_T_ETC___d1477 =
	     ({ 3'd0,
		IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1474 } ^
	      9'h100) <=
	     (IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1476 ^
	      9'h100) ;
  assign _0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_2_ETC___d1809 =
	     ({ 4'd0,
		IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1806 } ^
	      9'h100) <=
	     (IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1808 ^
	      9'h100) ;
  assign _0b0_CONCAT_IF_NOT_IF_cs10_568_BITS_30_TO_23_56_ETC___d1668 =
	     opB__h43923 >> diff__h43927 ;
  assign _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1251 =
	     10'd898 -
	     IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1209 ;
  assign _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1252 =
	     (_898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1251 ^
	      10'h200) <=
	     10'd512 ;
  assign _theResult_____1__h31349 =
	     IF_IF_IF_mac_obj_unsignedmult_rg_s5_val_53_THE_ETC___d778[8] ?
	       exp___1__h31625 :
	       exp__h31339 ;
  assign _theResult___exp__h54073 =
	     sfd__h53601[24] ?
	       ((_theResult___snd_fst_exp__h53500 == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h54109) :
	       IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1532 ;
  assign _theResult___exp__h65740 =
	     sfd__h65288[24] ?
	       ((_theResult___snd_fst_exp__h65187 == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h65808) :
	       IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1864 ;
  assign _theResult___fst_exp__h53491 =
	     sfdres__h45089[47] ?
	       _theResult___fst_exp__h53519 :
	       _theResult___fst_exp__h53582 ;
  assign _theResult___fst_exp__h53494 =
	     (sfdres__h45089[47] &&
	      IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277 ==
	      9'd127) ?
	       8'd254 :
	       _theResult___fst_exp__h53491 ;
  assign _theResult___fst_exp__h53519 =
	     (din_exp__h53409 == 8'd0) ? 8'd2 : din_exp__h53409 + 8'd1 ;
  assign _theResult___fst_exp__h53534 =
	     (din_exp__h53409 == 8'd0) ? 8'd1 : din_exp__h53409 ;
  assign _theResult___fst_exp__h53573 =
	     din_exp__h53409 -
	     { 2'd0,
	       IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1474 } ;
  assign _theResult___fst_exp__h53579 =
	     (!sfdres__h45089[47] && !sfdres__h45089[46] &&
	      !sfdres__h45089[45] &&
	      !sfdres__h45089[44] &&
	      !sfdres__h45089[43] &&
	      !sfdres__h45089[42] &&
	      !sfdres__h45089[41] &&
	      !sfdres__h45089[40] &&
	      !sfdres__h45089[39] &&
	      !sfdres__h45089[38] &&
	      !sfdres__h45089[37] &&
	      !sfdres__h45089[36] &&
	      !sfdres__h45089[35] &&
	      !sfdres__h45089[34] &&
	      !sfdres__h45089[33] &&
	      !sfdres__h45089[32] &&
	      !sfdres__h45089[31] &&
	      !sfdres__h45089[30] &&
	      !sfdres__h45089[29] &&
	      !sfdres__h45089[28] &&
	      !sfdres__h45089[27] &&
	      !sfdres__h45089[26] &&
	      !sfdres__h45089[25] &&
	      !sfdres__h45089[24] &&
	      !sfdres__h45089[23] &&
	      !sfdres__h45089[22] &&
	      !sfdres__h45089[21] &&
	      !sfdres__h45089[20] &&
	      !sfdres__h45089[19] &&
	      !sfdres__h45089[18] &&
	      !sfdres__h45089[17] &&
	      !sfdres__h45089[16] &&
	      !sfdres__h45089[15] &&
	      !sfdres__h45089[14] &&
	      !sfdres__h45089[13] &&
	      !sfdres__h45089[12] &&
	      !sfdres__h45089[11] &&
	      !sfdres__h45089[10] &&
	      !sfdres__h45089[9] &&
	      !sfdres__h45089[8] &&
	      !sfdres__h45089[7] &&
	      !sfdres__h45089[6] &&
	      !sfdres__h45089[5] &&
	      !sfdres__h45089[4] &&
	      !sfdres__h45089[3] &&
	      !sfdres__h45089[2] &&
	      !sfdres__h45089[1] &&
	      !sfdres__h45089[0] ||
	      !_0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_30_T_ETC___d1477) ?
	       8'd0 :
	       _theResult___fst_exp__h53573 ;
  assign _theResult___fst_exp__h53582 =
	     (!sfdres__h45089[47] && sfdres__h45089[46]) ?
	       _theResult___fst_exp__h53534 :
	       _theResult___fst_exp__h53579 ;
  assign _theResult___fst_exp__h54092 =
	     (_theResult___snd_fst_exp__h53500 == 8'd255 ||
	      guard__h45411 == 2'b0 ||
	      guard__h45411 == 2'b01) ?
	       _theResult___snd_fst_exp__h53500 :
	       CASE_guard5411_0b10_out_exp4076_0b11_theResult_ETC__q11 ;
  assign _theResult___fst_exp__h65178 =
	     sfdin__h60194[27] ?
	       _theResult___fst_exp__h65206 :
	       _theResult___fst_exp__h65269 ;
  assign _theResult___fst_exp__h65181 =
	     (sfdin__h60194[27] &&
	      IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 ==
	      9'd127) ?
	       8'd254 :
	       _theResult___fst_exp__h65178 ;
  assign _theResult___fst_exp__h65206 =
	     (din_exp__h65124 == 8'd0) ? 8'd2 : din_exp__h65124 + 8'd1 ;
  assign _theResult___fst_exp__h65221 =
	     (din_exp__h65124 == 8'd0) ? 8'd1 : din_exp__h65124 ;
  assign _theResult___fst_exp__h65260 =
	     din_exp__h65124 -
	     { 3'd0,
	       IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1806 } ;
  assign _theResult___fst_exp__h65266 =
	     (!sfdin__h60194[27] && !sfdin__h60194[26] &&
	      !sfdin__h60194[25] &&
	      !sfdin__h60194[24] &&
	      !sfdin__h60194[23] &&
	      !sfdin__h60194[22] &&
	      !sfdin__h60194[21] &&
	      !sfdin__h60194[20] &&
	      !sfdin__h60194[19] &&
	      !sfdin__h60194[18] &&
	      !sfdin__h60194[17] &&
	      !sfdin__h60194[16] &&
	      !sfdin__h60194[15] &&
	      !sfdin__h60194[14] &&
	      !sfdin__h60194[13] &&
	      !sfdin__h60194[12] &&
	      !sfdin__h60194[11] &&
	      !sfdin__h60194[10] &&
	      !sfdin__h60194[9] &&
	      !sfdin__h60194[8] &&
	      !sfdin__h60194[7] &&
	      !sfdin__h60194[6] &&
	      !sfdin__h60194[5] &&
	      !sfdin__h60194[4] &&
	      !sfdin__h60194[3] &&
	      !sfdin__h60194[2] &&
	      !sfdin__h60194[1] &&
	      !sfdin__h60194[0] ||
	      !_0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_2_ETC___d1809) ?
	       8'd0 :
	       _theResult___fst_exp__h65260 ;
  assign _theResult___fst_exp__h65269 =
	     (!sfdin__h60194[27] && sfdin__h60194[26]) ?
	       _theResult___fst_exp__h65221 :
	       _theResult___fst_exp__h65266 ;
  assign _theResult___fst_exp__h65759 =
	     (_theResult___snd_fst_exp__h65187 == 8'd255 ||
	      guard__h60181 == 2'b0 ||
	      guard__h60181 == 2'b01) ?
	       _theResult___snd_fst_exp__h65187 :
	       CASE_guard0181_0b10_out_exp5743_0b11_theResult_ETC__q18 ;
  assign _theResult___fst_sfd__h53495 =
	     (sfdres__h45089[47] &&
	      IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277 ==
	      9'd127) ?
	       23'd8388607 :
	       sfdin__h53485[47:25] ;
  assign _theResult___fst_sfd__h54093 =
	     (_theResult___snd_fst_exp__h53500 == 8'd255 ||
	      guard__h45411 == 2'b0 ||
	      guard__h45411 == 2'b01) ?
	       _theResult___snd_fst_sfd__h53501 :
	       CASE_guard5411_0b10_out_sfd4077_0b11_theResult_ETC__q10 ;
  assign _theResult___fst_sfd__h65182 =
	     (sfdin__h60194[27] &&
	      IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 ==
	      9'd127) ?
	       23'd8388607 :
	       sfdin__h65172[27:5] ;
  assign _theResult___fst_sfd__h65760 =
	     (_theResult___snd_fst_exp__h65187 == 8'd255 ||
	      guard__h60181 == 2'b0 ||
	      guard__h60181 == 2'b01) ?
	       _theResult___snd_fst_sfd__h65188 :
	       CASE_guard0181_0b10_out_sfd5744_0b11_theResult_ETC__q17 ;
  assign _theResult___sfd__h54074 =
	     sfd__h53601[24] ?
	       ((_theResult___snd_fst_exp__h53500 == 8'd254) ?
		  23'd0 :
		  sfd__h53601[23:1]) :
	       sfd__h53601[22:0] ;
  assign _theResult___sfd__h65741 =
	     sfd__h65288[24] ?
	       ((_theResult___snd_fst_exp__h65187 == 8'd254) ?
		  23'd0 :
		  sfd__h65288[23:1]) :
	       sfd__h65288[22:0] ;
  assign _theResult___snd__h45955 =
	     { NOT_as10_173_BITS_30_TO_23_174_EQ_0_198_238_CO_ETC___d1258[47:1],
	       NOT_as10_173_BITS_30_TO_23_174_EQ_0_198_238_CO_ETC___d1258[0] |
	       sfdlsb__h45952 } ;
  assign _theResult___snd__h53514 = { sfdres__h45089[46:0], 1'd0 } ;
  assign _theResult___snd__h53528 =
	     (!sfdres__h45089[47] && sfdres__h45089[46]) ?
	       _theResult___snd__h53530 :
	       _theResult___snd__h53542 ;
  assign _theResult___snd__h53530 = { sfdres__h45089[45:0], 2'd0 } ;
  assign _theResult___snd__h53542 =
	     (!sfdres__h45089[47] && !sfdres__h45089[46] &&
	      !sfdres__h45089[45] &&
	      !sfdres__h45089[44] &&
	      !sfdres__h45089[43] &&
	      !sfdres__h45089[42] &&
	      !sfdres__h45089[41] &&
	      !sfdres__h45089[40] &&
	      !sfdres__h45089[39] &&
	      !sfdres__h45089[38] &&
	      !sfdres__h45089[37] &&
	      !sfdres__h45089[36] &&
	      !sfdres__h45089[35] &&
	      !sfdres__h45089[34] &&
	      !sfdres__h45089[33] &&
	      !sfdres__h45089[32] &&
	      !sfdres__h45089[31] &&
	      !sfdres__h45089[30] &&
	      !sfdres__h45089[29] &&
	      !sfdres__h45089[28] &&
	      !sfdres__h45089[27] &&
	      !sfdres__h45089[26] &&
	      !sfdres__h45089[25] &&
	      !sfdres__h45089[24] &&
	      !sfdres__h45089[23] &&
	      !sfdres__h45089[22] &&
	      !sfdres__h45089[21] &&
	      !sfdres__h45089[20] &&
	      !sfdres__h45089[19] &&
	      !sfdres__h45089[18] &&
	      !sfdres__h45089[17] &&
	      !sfdres__h45089[16] &&
	      !sfdres__h45089[15] &&
	      !sfdres__h45089[14] &&
	      !sfdres__h45089[13] &&
	      !sfdres__h45089[12] &&
	      !sfdres__h45089[11] &&
	      !sfdres__h45089[10] &&
	      !sfdres__h45089[9] &&
	      !sfdres__h45089[8] &&
	      !sfdres__h45089[7] &&
	      !sfdres__h45089[6] &&
	      !sfdres__h45089[5] &&
	      !sfdres__h45089[4] &&
	      !sfdres__h45089[3] &&
	      !sfdres__h45089[2] &&
	      !sfdres__h45089[1] &&
	      !sfdres__h45089[0]) ?
	       sfdres__h45089 :
	       _theResult___snd__h53548 ;
  assign _theResult___snd__h53548 =
	     { IF_0_CONCAT_IF_IF_898_MINUS_IF_as10_173_BITS_3_ETC__q8[45:0],
	       2'd0 } ;
  assign _theResult___snd__h53566 =
	     sfdres__h45089 <<
	     IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1476 ;
  assign _theResult___snd__h53571 =
	     sfdres__h45089 <<
	     IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1474 ;
  assign _theResult___snd__h65201 = { sfdin__h60194[26:0], 1'd0 } ;
  assign _theResult___snd__h65215 =
	     (!sfdin__h60194[27] && sfdin__h60194[26]) ?
	       _theResult___snd__h65217 :
	       _theResult___snd__h65229 ;
  assign _theResult___snd__h65217 = { sfdin__h60194[25:0], 2'd0 } ;
  assign _theResult___snd__h65229 =
	     (!sfdin__h60194[27] && !sfdin__h60194[26] &&
	      !sfdin__h60194[25] &&
	      !sfdin__h60194[24] &&
	      !sfdin__h60194[23] &&
	      !sfdin__h60194[22] &&
	      !sfdin__h60194[21] &&
	      !sfdin__h60194[20] &&
	      !sfdin__h60194[19] &&
	      !sfdin__h60194[18] &&
	      !sfdin__h60194[17] &&
	      !sfdin__h60194[16] &&
	      !sfdin__h60194[15] &&
	      !sfdin__h60194[14] &&
	      !sfdin__h60194[13] &&
	      !sfdin__h60194[12] &&
	      !sfdin__h60194[11] &&
	      !sfdin__h60194[10] &&
	      !sfdin__h60194[9] &&
	      !sfdin__h60194[8] &&
	      !sfdin__h60194[7] &&
	      !sfdin__h60194[6] &&
	      !sfdin__h60194[5] &&
	      !sfdin__h60194[4] &&
	      !sfdin__h60194[3] &&
	      !sfdin__h60194[2] &&
	      !sfdin__h60194[1] &&
	      !sfdin__h60194[0]) ?
	       sfdin__h60194 :
	       _theResult___snd__h65235 ;
  assign _theResult___snd__h65235 =
	     { IF_0_CONCAT_IF_IF_IF_NOT_IF_cs10_568_BITS_30_T_ETC__q15[25:0],
	       2'd0 } ;
  assign _theResult___snd__h65253 =
	     sfdin__h60194 <<
	     IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1808 ;
  assign _theResult___snd__h65258 =
	     sfdin__h60194 <<
	     IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1806 ;
  assign _theResult___snd_fst__h53639 =
	     { IF_sfdin3485_BIT_24_THEN_2_ELSE_0__q9[1],
	       { sfdin__h53485[23:0], 23'd0 } != 47'd0 } ;
  assign _theResult___snd_fst__h65311 =
	     { IF_sfdin5172_BIT_4_THEN_2_ELSE_0__q16[1],
	       { sfdin__h65172[3:0], 23'd0 } != 27'd0 } ;
  assign _theResult___snd_fst_exp__h53500 =
	     NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1250 ?
	       _theResult___fst_exp__h53494 :
	       8'd0 ;
  assign _theResult___snd_fst_exp__h65187 =
	     ((x__h59472 != 8'd255 || x__h54130 == 23'd0 || x__h54130[22]) &&
	      NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607) ?
	       _theResult___fst_exp__h65181 :
	       8'd0 ;
  assign _theResult___snd_fst_sfd__h53501 =
	     NOT_as10_173_BITS_30_TO_23_174_EQ_255_175_227__ETC___d1250 ?
	       _theResult___fst_sfd__h53495 :
	       23'd0 ;
  assign _theResult___snd_fst_sfd__h65188 =
	     ((x__h59472 != 8'd255 || x__h54130 == 23'd0 || x__h54130[22]) &&
	      NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607) ?
	       _theResult___fst_sfd__h65182 :
	       23'd0 ;
  assign a__h43907 =
	     { 1'b0,
	       NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
		 cs10[30:23] != 8'd0 :
		 x__h59472 != 8'd0,
	       NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
		 cs10[22:0] :
		 x__h54130,
	       3'b0 } ;
  assign a_temp__h32978 =
	     { 2'd0,
	       mac_rg_mult_mant_s7_59_ULE_mac_rg_mant_shift_s_ETC___d861 ?
		 mac_rg_mant_shift_s7 :
		 mac_rg_mult_mant_s7 } ;
  assign as10_173_BITS_30_TO_23_174_EQ_255_175_AND_NOT__ETC___d1219 =
	     as10[30:23] == 8'd255 && as10[22:0] != 23'd0 && !as10[22] ||
	     bs10[30:23] == 8'd255 && bs10[22:0] != 23'd0 && !bs10[22] ||
	     as10[30:23] == 8'd255 && as10[22] ||
	     bs10[30:23] == 8'd255 && bs10[22] ||
	     as10_173_BITS_30_TO_23_174_EQ_255_175_AND_as10_ETC___d1215 ;
  assign as10_173_BITS_30_TO_23_174_EQ_255_175_AND_as10_ETC___d1215 =
	     as10[30:23] == 8'd255 && as10[22:0] == 23'd0 ||
	     bs10[30:23] == 8'd255 && bs10[22:0] == 23'd0 ||
	     as10[30:23] == 8'd0 && as10[22:0] == 23'd0 ||
	     bs10[30:23] == 8'd0 && bs10[22:0] == 23'd0 ||
	     !IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1210 ||
	     IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1212 ;
  assign as10_BITS_30_TO_23_MINUS_127__q5 = as10[30:23] - 8'd127 ;
  assign b__h43909 =
	     ((x__h59472 != 8'd255 || x__h54130 == 23'd0 || x__h54130[22]) &&
	      NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607) ?
	       IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1679 :
	       opB__h43923 ;
  assign b_temp__h32979 =
	     { 2'd0,
	       mac_rg_mult_mant_s7_59_ULE_mac_rg_mant_shift_s_ETC___d861 ?
		 mac_rg_mult_mant_s7 :
		 mac_rg_mant_shift_s7 } ;
  assign bs10_BITS_30_TO_23_MINUS_127__q6 = bs10[30:23] - 8'd127 ;
  assign c_mant_s7__h32644 = { mac_rg_C_s6[22:0], 3'b0 } ;
  assign carrrg_b__h10328 =
	     { x__h10741 | y__h10742,
	       x__h11054 | y__h11055,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[0] |
	       y__h11180,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[0] } ;
  assign carrrg_b__h13470 =
	     { x__h13635 | y__h13636,
	       x__h13893 | y__h13894,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[0] |
	       y__h14019,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[0] } ;
  assign carrrg_b__h14512 =
	     { x__h14732 | y__h14733,
	       x__h14990 | y__h14991,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[0] |
	       y__h15116,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[5] } ;
  assign carrrg_b__h15958 =
	     { x__h16123 | y__h16124,
	       x__h16381 | y__h16382,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[0] |
	       y__h16507,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[6] } ;
  assign carrrg_b__h17352 =
	     { x__h17551 | y__h17552,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[1] |
	       y__h17781,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[0],
	       1'b0 } ;
  assign carrrg_b__h19068 =
	     { x__h19237 | y__h19238,
	       x__h19497 | y__h19498,
	       mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[0] |
	       y__h19623,
	       mac_obj_unsignedmult_rg_s1_op_2[3] } ;
  assign carrrg_b__h20527 =
	     { x__h20761 | y__h20762,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[1] |
	       y__h20984,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[0],
	       1'b0 } ;
  assign carrrg_b__h21932 =
	     { x__h22099 | y__h22100,
	       x__h22358 | y__h22359,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[0] |
	       y__h22484,
	       mac_obj_unsignedmult_rg_s1_op_4[7] } ;
  assign carrrg_b__h25894 =
	     { x__h26065 | y__h26066,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[1] |
	       y__h26295,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[0],
	       1'b0 } ;
  assign carrrg_b__h26857 =
	     { x__h27024 | y__h27025,
	       x__h27332 | y__h27333,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[0] |
	       y__h27458,
	       IF_x6479_OR_y6480_THEN_1_ELSE_0__q1[0] } ;
  assign carrrg_b__h27900 =
	     { x__h28067 | y__h28068,
	       x__h28377 | y__h28378,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[0] |
	       y__h28503,
	       cin__h27889 } ;
  assign cin__h27889 = x__h27517 | y__h27518 ;
  assign cin__h28934 = x__h28562 | y__h28563 ;
  assign cs10_568_BITS_30_TO_23_569_EQ_255_570_AND_NOT__ETC___d1585 =
	     cs10[30:23] == 8'd255 && cs10[22:0] != 23'd0 && !cs10[22] ||
	     x__h59472 == 8'd255 && x__h54130[22] ||
	     cs10[30:23] == 8'd255 && cs10[22] ||
	     x__h59472 == 8'd255 && x__h54130 == 23'd0 ||
	     cs10[30:23] == 8'd255 && cs10[22:0] == 23'd0 ;
  assign cs10_568_BIT_31_630_EQ_IF_as10_173_BITS_30_TO__ETC___d1649 =
	     cs10[31] ==
	     IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1648 ;
  assign cs10_BITS_30_TO_23_MINUS_127__q12 = cs10[30:23] - 8'd127 ;
  assign diff__h43927 =
	     NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
	       x__h60777[7:0] :
	       x__h60781[7:0] ;
  assign din_exp3409_MINUS_127__q7 = din_exp__h53409 - 8'd127 ;
  assign din_exp5124_MINUS_127__q14 = din_exp__h65124 - 8'd127 ;
  assign din_exp__h53409 =
	     _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1252 ?
	       value__h53426[7:0] :
	       8'd0 ;
  assign din_exp__h65124 =
	     NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
	       cs10[30:23] :
	       x__h59472 ;
  assign din_inc___2_exp__h54109 = _theResult___snd_fst_exp__h53500 + 8'd1 ;
  assign din_inc___2_exp__h65808 = _theResult___snd_fst_exp__h65187 + 8'd1 ;
  assign e__h30675 = x__h30700 - 8'd127 ;
  assign e__h35977 = mac_rg_mant_s8[0] ? 2'b01 : 2'b10 ;
  assign e__h36118 = mac_rg_mant_s8[2] ? 2'b01 : 2'b10 ;
  assign e__h36259 = mac_rg_mant_s8[4] ? 2'b01 : 2'b10 ;
  assign e__h36400 = mac_rg_mant_s8[6] ? 2'b01 : 2'b10 ;
  assign e__h36541 = mac_rg_mant_s8[8] ? 2'b01 : 2'b10 ;
  assign e__h36682 = mac_rg_mant_s8[10] ? 2'b01 : 2'b10 ;
  assign e__h36823 = mac_rg_mant_s8[12] ? 2'b01 : 2'b10 ;
  assign e__h36964 = mac_rg_mant_s8[14] ? 2'b01 : 2'b10 ;
  assign e__h37105 = mac_rg_mant_s8[16] ? 2'b01 : 2'b10 ;
  assign e__h37246 = mac_rg_mant_s8[18] ? 2'b01 : 2'b10 ;
  assign e__h37387 = mac_rg_mant_s8[20] ? 2'b01 : 2'b10 ;
  assign e__h37528 = mac_rg_mant_s8[22] ? 2'b01 : 2'b10 ;
  assign e__h37668 = mac_rg_mant_s8[24] ? 2'b01 : 2'b10 ;
  assign exp___1__h31417 = mac_rg_exp_add_s4 + 8'd1 ;
  assign exp___1__h31625 = exp__h31339 + 8'd1 ;
  assign exp__h31339 =
	     IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[15] ?
	       exp___1__h31417 :
	       mac_rg_exp_add_s4 ;
  assign exp_diff_s6__h31866 = mac_rg_mult_s5[30:23] - mac_rg_C_s5[30:23] ;
  assign exponent__h33336 = mac_rg_exponent_s8 - op2__h40190 ;
  assign exponent__h33365 = mac_rg_exponent_s8 + 8'd1 ;
  assign grs__h41335 =
	     { mac_guard_bit_s9, mac_round_bit_s9, mac_sticky_bit_s9 } ;
  assign grs_mul_round__h31347 =
	     IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[15] ?
	       { IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[8:7],
		 mul_sticky_bit__h31421 } :
	       { IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[7:6],
		 mul_sticky_bit__h31448 } ;
  assign guard__h45411 =
	     (sfdres__h45089[47] &&
	      IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1277 ==
	      9'd127) ?
	       2'd3 :
	       _theResult___snd_fst__h53639 ;
  assign guard__h60147 =
	     (sfdin__h60194[27] &&
	      IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_6_ETC___d1689 ==
	      9'd127) ?
	       2'd3 :
	       _theResult___snd_fst__h65311 ;
  assign guard__h60181 =
	     ((x__h59472 != 8'd255 || x__h54130 == 23'd0 || x__h54130[22]) &&
	      NOT_cs10_568_BITS_30_TO_23_569_EQ_255_570_597__ETC___d1607) ?
	       guard__h60147 :
	       2'd0 ;
  assign guard__h60784 = opB__h43923 << x__h60841 ;
  assign leftshift_count__h33335 = out__h33470 + 5'd1 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d118 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86 ^
	     { mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[0] |
	       y__h12501,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[7] } ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123 =
	     mac_obj_unsignedmult_rg_a & y__h10525 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[5:2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[4:1] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d172 =
	     mac_obj_unsignedmult_rg_a & y__h14571 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d172[7:4] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d54[6:3] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[5:2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[4:1] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[5:2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[4:1] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d172[3:0] &
	     rg_b__h17340 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d54 =
	     mac_obj_unsignedmult_rg_a & y__h12979 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59 =
	     mac_obj_unsignedmult_rg_a & y__h11733 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63 =
	     mac_obj_unsignedmult_rg_a & y__h11934 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d66 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[7] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[6] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69 =
	     mac_obj_unsignedmult_rg_a & y__h11817 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79 =
	     mac_obj_unsignedmult_rg_a & y__h10992 ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[7:6] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[6:5] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[7:6] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[6:5] ;
  assign mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96 =
	     mac_obj_unsignedmult_rg_a & y__h10610 ;
  assign mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362 =
	     mac_obj_unsignedmult_rg_s1_op_0[6:3] &
	     mac_obj_unsignedmult_rg_s1_op_1[6:3] ;
  assign mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d411 =
	     mac_obj_unsignedmult_rg_s1_op_0[8:7] &
	     mac_obj_unsignedmult_rg_s1_op_1[8:7] ;
  assign mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413 =
	     mac_obj_unsignedmult_rg_s1_op_0[8:7] ^
	     mac_obj_unsignedmult_rg_s1_op_1[8:7] ;
  assign mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451 =
	     mac_obj_unsignedmult_rg_s1_op_2[10:7] &
	     mac_obj_unsignedmult_rg_s1_op_3[10:7] ;
  assign mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423 =
	     mac_obj_unsignedmult_rg_s1_op_2[6:5] &
	     mac_obj_unsignedmult_rg_s1_op_3[6:5] ;
  assign mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d427 =
	     mac_obj_unsignedmult_rg_s1_op_2[6:5] ^
	     mac_obj_unsignedmult_rg_s1_op_3[6:5] ;
  assign mac_obj_unsignedmult_rg_s2_op_0_94_BIT_10_09_A_ETC___d551 =
	     { x__h24334 | y__h24335,
	       x__h24124 | y__h24125,
	       x__h23914 | y__h23915,
	       mac_obj_unsignedmult_rg_s2_op_0[7] &
	       mac_obj_unsignedmult_rg_s2_op_1[7] } ;
  assign mac_obj_unsignedmult_rg_s2_op_0_94_BIT_10_09_X_ETC___d528 =
	     { x__h24231 ^ mac_obj_unsignedmult_rg_s2_op_2[10],
	       x__h24021 ^ mac_obj_unsignedmult_rg_s2_op_2[9],
	       x__h23810 ^ mac_obj_unsignedmult_rg_s2_op_2[8],
	       mac_obj_unsignedmult_rg_s2_op_0[7] ^
	       mac_obj_unsignedmult_rg_s2_op_1[7] } ;
  assign mac_obj_unsignedmult_rg_s2_op_0_94_BIT_12_97_A_ETC___d552 =
	     { x__h24754 | y__h24755,
	       x__h24544 | y__h24545,
	       mac_obj_unsignedmult_rg_s2_op_0_94_BIT_10_09_A_ETC___d551 } ;
  assign mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580 =
	     mac_obj_unsignedmult_rg_s3_op_0[11:8] &
	     mac_obj_unsignedmult_rg_s3_op_1[11:8] ;
  assign mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564 =
	     mac_obj_unsignedmult_rg_s3_op_0[14:12] &
	     mac_obj_unsignedmult_rg_s3_op_1[14:12] ;
  assign mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566 =
	     mac_obj_unsignedmult_rg_s3_op_0[14:12] ^
	     mac_obj_unsignedmult_rg_s3_op_1[14:12] ;
  assign mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d654 =
	     { x__h29417 | y__h29418,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564[0] |
	       y__h29538,
	       cin__h28934 } ;
  assign mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622 =
	     mac_obj_unsignedmult_rg_s3_op_0[3:0] &
	     mac_obj_unsignedmult_rg_s3_op_1[3:0] ;
  assign mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601 =
	     mac_obj_unsignedmult_rg_s3_op_0[7:4] &
	     mac_obj_unsignedmult_rg_s3_op_1[7:4] ;
  assign mac_result__h43647 = mac_rg_out_valid ? mac_out : 32'b0 ;
  assign mac_rg_mant_s9_102_BITS_26_TO_4_103_PLUS_1___d1104 =
	     mac_rg_mant_s9[26:4] + 23'd1 ;
  assign mac_rg_mult_mant_s7_59_ULE_mac_rg_mant_shift_s_ETC___d861 =
	     mac_rg_mult_mant_s7 <= mac_rg_mant_shift_s7 ;
  assign mant_1__h31341 =
	     IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[15] ?
	       IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[15:8] :
	       IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[14:7] ;
  assign mantissa__h33337 = mac_rg_mant_s8[25:0] << leftshift_count__h33335 ;
  assign mantissa_round__h31580 = { 1'd0, mant_1__h31341 } + 9'd1 ;
  assign mul_result__h31239 =
	     { mac_rg_sign_s4,
	       IF_mac_rg_exception_s1_39_EQ_3_52_THEN_IF_IF_I_ETC___d798 } ;
  assign mul_sticky_bit__h31421 =
	     IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[6:0] !=
	     7'd0 ;
  assign mul_sticky_bit__h31448 =
	     IF_mac_obj_unsignedmult_rg_s5_val_53_THEN_mac__ETC___d755[5:0] !=
	     6'd0 ;
  assign op2__h40190 = { 3'd0, leftshift_count__h33335 } ;
  assign opAsfd__h44015 = { as10[30:23] != 8'd0, as10[22:0] } ;
  assign opB__h43923 =
	     { 1'b0,
	       IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609__ETC___d1666 } ;
  assign opBsfd__h44016 = { bs10[30:23] != 8'd0, bs10[22:0] } ;
  assign out__h33470 =
	     (IF_IF_IF_IF_mac_rg_mant_s8_81_BIT_25_85_THEN_0_ETC___d979[4] &
	      spliced_bits__h33518[4]) ?
	       5'b0 :
	       ((~IF_IF_IF_IF_mac_rg_mant_s8_81_BIT_25_85_THEN_0_ETC___d979[4]) ?
		  IF_IF_IF_IF_mac_rg_mant_s8_81_BIT_25_85_THEN_0_ETC___d979 :
		  { 1'b1, spliced_bits__h33518[3:0] }) ;
  assign out_exp__h54076 =
	     _theResult___snd_fst_sfd__h53501[0] ?
	       _theResult___exp__h54073 :
	       _theResult___snd_fst_exp__h53500 ;
  assign out_exp__h65743 =
	     _theResult___snd_fst_sfd__h65188[0] ?
	       _theResult___exp__h65740 :
	       _theResult___snd_fst_exp__h65187 ;
  assign out_sfd__h54077 =
	     _theResult___snd_fst_sfd__h53501[0] ?
	       _theResult___sfd__h54074 :
	       _theResult___snd_fst_sfd__h53501 ;
  assign out_sfd__h65744 =
	     _theResult___snd_fst_sfd__h65188[0] ?
	       _theResult___sfd__h65741 :
	       _theResult___snd_fst_sfd__h65188 ;
  assign p__h10324 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[5:2] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[4:1] ;
  assign p__h13466 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[5:2] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[4:1] ;
  assign p__h14508 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d172[7:4] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d54[6:3] ;
  assign p__h15954 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[5:2] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[4:1] ;
  assign p__h17348 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d172[3:0] ^
	     rg_b__h17340 ;
  assign p__h19064 =
	     mac_obj_unsignedmult_rg_s1_op_0[6:3] ^
	     mac_obj_unsignedmult_rg_s1_op_1[6:3] ;
  assign p__h20523 =
	     { mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413,
	       mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d427 } ;
  assign p__h21928 =
	     mac_obj_unsignedmult_rg_s1_op_2[10:7] ^
	     mac_obj_unsignedmult_rg_s1_op_3[10:7] ;
  assign p__h25890 =
	     mac_obj_unsignedmult_rg_s3_op_0[3:0] ^
	     mac_obj_unsignedmult_rg_s3_op_1[3:0] ;
  assign p__h26853 =
	     mac_obj_unsignedmult_rg_s3_op_0[7:4] ^
	     mac_obj_unsignedmult_rg_s3_op_1[7:4] ;
  assign p__h27896 =
	     mac_obj_unsignedmult_rg_s3_op_0[11:8] ^
	     mac_obj_unsignedmult_rg_s3_op_1[11:8] ;
  assign result__h60772 = a__h43907 - b__h43909 ;
  assign result__h60789 =
	     { _0b0_CONCAT_IF_NOT_IF_cs10_568_BITS_30_TO_23_56_ETC___d1668[27:1],
	       _0b0_CONCAT_IF_NOT_IF_cs10_568_BITS_30_TO_23_56_ETC___d1668[0] |
	       guard__h60784 != 28'd0 } ;
  assign result__h60901 = a__h43907 + b__h43909 ;
  assign rg_b__h17340 =
	     { mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d54[2:0],
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[5] } ;
  assign sfdA__h43941 = { 1'b0, x__h59472 != 8'd0, x__h54130, 3'b0 } ;
  assign sfdB__h43942 = { 1'b0, cs10[30:23] != 8'd0, cs10[22:0], 3'b0 } ;
  assign sfd__h45110 = { 1'd1, as10[21:0] } ;
  assign sfd__h45113 = { 1'd1, bs10[21:0] } ;
  assign sfd__h53601 =
	     { 1'b0,
	       _theResult___snd_fst_exp__h53500 != 8'd0,
	       _theResult___snd_fst_sfd__h53501 } +
	     25'd1 ;
  assign sfd__h60165 = { 1'd1, x__h54130[21:0] } ;
  assign sfd__h60168 = { 1'd1, cs10[21:0] } ;
  assign sfd__h65288 =
	     { 1'b0,
	       _theResult___snd_fst_exp__h65187 != 8'd0,
	       _theResult___snd_fst_sfd__h65188 } +
	     25'd1 ;
  assign sfdin__h53485 =
	     sfdres__h45089[47] ?
	       _theResult___snd__h53514 :
	       _theResult___snd__h53528 ;
  assign sfdin__h60194 =
	     (NOT_IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THE_ETC___d1629 ?
		!cs10_568_BIT_31_630_EQ_IF_as10_173_BITS_30_TO__ETC___d1649 :
		!IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1651) ?
	       result__h60772 :
	       result__h60901 ;
  assign sfdin__h65172 =
	     sfdin__h60194[27] ?
	       _theResult___snd__h65201 :
	       _theResult___snd__h65215 ;
  assign sfdlsb__h45952 = x__h46037 != 48'd0 ;
  assign sfdres__h43985 = opAsfd__h44015 * opBsfd__h44016 ;
  assign sfdres__h45089 =
	     _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1252 ?
	       sfdres__h43985 :
	       _theResult___snd__h45955 ;
  assign spliced_bits__h10173 =
	     { mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d66 ^
	       (x__h12130 | y__h12131),
	       x__h12170 ^ (x__h12380 | y__h12381),
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d118 } ;
  assign spliced_bits__h10232 = p__h10324 ^ carrrg_b__h10328 ;
  assign spliced_bits__h13262 =
	     { mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[1],
	       1'b0,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[0],
	       1'b0 } ;
  assign spliced_bits__h13321 = p__h14508 ^ carrrg_b__h14512 ;
  assign spliced_bits__h13380 = p__h13466 ^ carrrg_b__h13470 ;
  assign spliced_bits__h15770 =
	     { mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[1],
	       1'b0,
	       mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[0],
	       3'b0 } ;
  assign spliced_bits__h15868 = p__h15954 ^ carrrg_b__h15958 ;
  assign spliced_bits__h17164 =
	     { mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[0],
	       5'b0 } ;
  assign spliced_bits__h17262 = p__h17348 ^ carrrg_b__h17352 ;
  assign spliced_bits__h18973 = p__h19064 ^ carrrg_b__h19068 ;
  assign spliced_bits__h20437 = p__h20523 ^ carrrg_b__h20527 ;
  assign spliced_bits__h21842 = p__h21928 ^ carrrg_b__h21932 ;
  assign spliced_bits__h24967 =
	     { mac_obj_unsignedmult_rg_s2_op_2[7],
	       mac_obj_unsignedmult_rg_s2_op_1[6:5],
	       3'b0,
	       mac_obj_unsignedmult_rg_s2_op_1[1],
	       1'b0 } ;
  assign spliced_bits__h25718 =
	     { x__h29114 | y__h29115,
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566 ^
	       mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d654 } ;
  assign spliced_bits__h25748 = p__h27896 ^ carrrg_b__h27900 ;
  assign spliced_bits__h25778 = p__h26853 ^ carrrg_b__h26857 ;
  assign spliced_bits__h25808 = p__h25890 ^ carrrg_b__h25894 ;
  assign spliced_bits__h33518 =
	     (spliced_bits__h33671[3] & spliced_bits__h33641[3]) ?
	       5'b10000 :
	       ((~spliced_bits__h33671[3]) ?
		  { 1'b0, spliced_bits__h33671 } :
		  { 2'b01, spliced_bits__h33641[2:0] }) ;
  assign spliced_bits__h33641 =
	     spliced_bits__h33854[2] ?
	       4'b1000 :
	       ((~spliced_bits__h33854[2]) ?
		  { 1'b0, spliced_bits__h33854 } :
		  4'd4) ;
  assign spliced_bits__h33671 =
	     (spliced_bits__h33914[2] & spliced_bits__h33884[2]) ?
	       4'b1000 :
	       ((~spliced_bits__h33914[2]) ?
		  { 1'b0, spliced_bits__h33914 } :
		  { 2'b01, spliced_bits__h33884[1:0] }) ;
  assign spliced_bits__h33701 =
	     (spliced_bits__h33974[2] & spliced_bits__h33944[2]) ?
	       4'b1000 :
	       ((~spliced_bits__h33974[2]) ?
		  { 1'b0, spliced_bits__h33974 } :
		  { 2'b01, spliced_bits__h33944[1:0] }) ;
  assign spliced_bits__h33730 =
	     (spliced_bits__h34033[2] & spliced_bits__h34004[2]) ?
	       4'b1000 :
	       ((~spliced_bits__h34033[2]) ?
		  { 1'b0, spliced_bits__h34033 } :
		  { 2'b01, spliced_bits__h34004[1:0] }) ;
  assign spliced_bits__h33854 =
	     spliced_bits__h35227[1] ?
	       3'b100 :
	       ((~spliced_bits__h35227[1]) ?
		  { 1'b0, spliced_bits__h35227 } :
		  3'd2) ;
  assign spliced_bits__h33884 =
	     (spliced_bits__h35089[1] & spliced_bits__h35158[1]) ?
	       3'b100 :
	       ((~spliced_bits__h35089[1]) ?
		  { 1'b0, spliced_bits__h35089 } :
		  { 2'b01, spliced_bits__h35158[0] }) ;
  assign spliced_bits__h33914 =
	     (spliced_bits__h34951[1] & spliced_bits__h35020[1]) ?
	       3'b100 :
	       ((~spliced_bits__h34951[1]) ?
		  { 1'b0, spliced_bits__h34951 } :
		  { 2'b01, spliced_bits__h35020[0] }) ;
  assign spliced_bits__h33944 =
	     (spliced_bits__h34813[1] & spliced_bits__h34882[1]) ?
	       3'b100 :
	       ((~spliced_bits__h34813[1]) ?
		  { 1'b0, spliced_bits__h34813 } :
		  { 2'b01, spliced_bits__h34882[0] }) ;
  assign spliced_bits__h33974 =
	     (spliced_bits__h34675[1] & spliced_bits__h34744[1]) ?
	       3'b100 :
	       ((~spliced_bits__h34675[1]) ?
		  { 1'b0, spliced_bits__h34675 } :
		  { 2'b01, spliced_bits__h34744[0] }) ;
  assign spliced_bits__h34004 =
	     (spliced_bits__h34537[1] & spliced_bits__h34606[1]) ?
	       3'b100 :
	       ((~spliced_bits__h34537[1]) ?
		  { 1'b0, spliced_bits__h34537 } :
		  { 2'b01, spliced_bits__h34606[0] }) ;
  assign spliced_bits__h34033 =
	     (spliced_bits__h34399[1] & spliced_bits__h34468[1]) ?
	       3'b100 :
	       ((~spliced_bits__h34399[1]) ?
		  { 1'b0, spliced_bits__h34399 } :
		  { 2'b01, spliced_bits__h34468[0] }) ;
  assign spliced_bits__h34399 = mac_rg_mant_s8[25] ? 2'b0 : e__h37668 ;
  assign spliced_bits__h34468 = mac_rg_mant_s8[23] ? 2'b0 : e__h37528 ;
  assign spliced_bits__h34537 = mac_rg_mant_s8[21] ? 2'b0 : e__h37387 ;
  assign spliced_bits__h34606 = mac_rg_mant_s8[19] ? 2'b0 : e__h37246 ;
  assign spliced_bits__h34675 = mac_rg_mant_s8[17] ? 2'b0 : e__h37105 ;
  assign spliced_bits__h34744 = mac_rg_mant_s8[15] ? 2'b0 : e__h36964 ;
  assign spliced_bits__h34813 = mac_rg_mant_s8[13] ? 2'b0 : e__h36823 ;
  assign spliced_bits__h34882 = mac_rg_mant_s8[11] ? 2'b0 : e__h36682 ;
  assign spliced_bits__h34951 = mac_rg_mant_s8[9] ? 2'b0 : e__h36541 ;
  assign spliced_bits__h35020 = mac_rg_mant_s8[7] ? 2'b0 : e__h36400 ;
  assign spliced_bits__h35089 = mac_rg_mant_s8[5] ? 2'b0 : e__h36259 ;
  assign spliced_bits__h35158 = mac_rg_mant_s8[3] ? 2'b0 : e__h36118 ;
  assign spliced_bits__h35227 = mac_rg_mant_s8[1] ? 2'b0 : e__h35977 ;
  assign value__h53426 =
	     IF_as10_173_BITS_30_TO_23_174_EQ_0_198_THEN_89_ETC___d1209 +
	     10'd127 ;
  assign x9472_MINUS_127__q13 = x__h59472 - 8'd127 ;
  assign x__h10741 = x__h10743 | y__h10744 ;
  assign x__h10743 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[2] |
	     y__h10746 ;
  assign x__h10824 = p__h10324[2] & p__h10324[1] ;
  assign x__h10891 = x__h10824 & p__h10324[0] ;
  assign x__h11054 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[1] |
	     y__h11057 ;
  assign x__h11124 = p__h10324[1] & p__h10324[0] ;
  assign x__h11239 = x__h11241 | y__h11242 ;
  assign x__h11241 = x__h11243 | y__h11244 ;
  assign x__h11243 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[3] |
	     y__h11246 ;
  assign x__h11313 = p__h10324[3] & p__h10324[2] ;
  assign x__h11380 = x__h11313 & p__h10324[1] ;
  assign x__h11470 = x__h11380 & p__h10324[0] ;
  assign x__h12130 = x__h12132 | y__h12133 ;
  assign x__h12132 = x__h12134 | y__h12135 ;
  assign x__h12134 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[7] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[6] ;
  assign x__h12170 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d69[7] ^
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[6] ;
  assign x__h12212 =
	     x__h12170 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[1] ;
  assign x__h12276 =
	     x__h12212 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[0] ;
  assign x__h12380 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[1] |
	     y__h12383 ;
  assign x__h12447 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[0] ;
  assign x__h12560 = x__h12562 | y__h12563 ;
  assign x__h12562 = x__h12564 | y__h12565 ;
  assign x__h12564 = x__h12566 | y__h12567 ;
  assign x__h12566 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[7] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[6] ;
  assign x__h12631 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d66 &
	     x__h12170 ;
  assign x__h12695 =
	     x__h12631 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[1] ;
  assign x__h12781 =
	     x__h12695 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[0] ;
  assign x__h13635 = x__h13637 | y__h13638 ;
  assign x__h13637 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[2] |
	     y__h13640 ;
  assign x__h13718 = p__h13466[2] & p__h13466[1] ;
  assign x__h13785 = x__h13718 & p__h13466[0] ;
  assign x__h13893 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[1] |
	     y__h13896 ;
  assign x__h13963 = p__h13466[1] & p__h13466[0] ;
  assign x__h14078 = x__h14080 | y__h14081 ;
  assign x__h14080 = x__h14082 | y__h14083 ;
  assign x__h14082 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[3] |
	     y__h14085 ;
  assign x__h14152 = p__h13466[3] & p__h13466[2] ;
  assign x__h14219 = x__h14152 & p__h13466[1] ;
  assign x__h14309 = x__h14219 & p__h13466[0] ;
  assign x__h14732 = x__h14734 | y__h14735 ;
  assign x__h14734 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[2] |
	     y__h14737 ;
  assign x__h14815 = p__h14508[2] & p__h14508[1] ;
  assign x__h14882 = x__h14815 & p__h14508[0] ;
  assign x__h14990 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[1] |
	     y__h14993 ;
  assign x__h15060 = p__h14508[1] & p__h14508[0] ;
  assign x__h15175 = x__h15177 | y__h15178 ;
  assign x__h15177 = x__h15179 | y__h15180 ;
  assign x__h15179 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[3] |
	     y__h15182 ;
  assign x__h15249 = p__h14508[3] & p__h14508[2] ;
  assign x__h15316 = x__h15249 & p__h14508[1] ;
  assign x__h15406 = x__h15316 & p__h14508[0] ;
  assign x__h16123 = x__h16125 | y__h16126 ;
  assign x__h16125 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[2] |
	     y__h16128 ;
  assign x__h16206 = p__h15954[2] & p__h15954[1] ;
  assign x__h16273 = x__h16206 & p__h15954[0] ;
  assign x__h16381 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[1] |
	     y__h16384 ;
  assign x__h16451 = p__h15954[1] & p__h15954[0] ;
  assign x__h16566 = x__h16568 | y__h16569 ;
  assign x__h16568 = x__h16570 | y__h16571 ;
  assign x__h16570 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[3] |
	     y__h16573 ;
  assign x__h16640 = p__h15954[3] & p__h15954[2] ;
  assign x__h16707 = x__h16640 & p__h15954[1] ;
  assign x__h16797 = x__h16707 & p__h15954[0] ;
  assign x__h17551 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[2] |
	     y__h17554 ;
  assign x__h17632 = p__h17348[2] & p__h17348[1] ;
  assign x__h17965 = x__h17967 | y__h17968 ;
  assign x__h17967 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[3] |
	     y__h17970 ;
  assign x__h18037 = p__h17348[3] & p__h17348[2] ;
  assign x__h18104 = x__h18037 & p__h17348[1] ;
  assign x__h19237 = x__h19239 | y__h19240 ;
  assign x__h19239 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[2] |
	     y__h19242 ;
  assign x__h19320 = p__h19064[2] & p__h19064[1] ;
  assign x__h19387 = x__h19320 & p__h19064[0] ;
  assign x__h19497 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[1] |
	     y__h19500 ;
  assign x__h19567 = p__h19064[1] & p__h19064[0] ;
  assign x__h19682 = x__h19684 | y__h19685 ;
  assign x__h19684 = x__h19686 | y__h19687 ;
  assign x__h19686 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[3] |
	     y__h19689 ;
  assign x__h19756 = p__h19064[3] & p__h19064[2] ;
  assign x__h19823 = x__h19756 & p__h19064[1] ;
  assign x__h19913 = x__h19823 & p__h19064[0] ;
  assign x__h20761 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d411[0] |
	     y__h20764 ;
  assign x__h20841 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413[0] &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d427[1] ;
  assign x__h21161 = x__h21163 | y__h21164 ;
  assign x__h21163 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d411[1] |
	     y__h21166 ;
  assign x__h21230 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413[1] &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413[0] ;
  assign x__h21294 =
	     x__h21230 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d427[1] ;
  assign x__h22099 = x__h22101 | y__h22102 ;
  assign x__h22101 =
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[2] |
	     y__h22104 ;
  assign x__h22182 = p__h21928[2] & p__h21928[1] ;
  assign x__h22249 = x__h22182 & p__h21928[0] ;
  assign x__h22358 =
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[1] |
	     y__h22361 ;
  assign x__h22428 = p__h21928[1] & p__h21928[0] ;
  assign x__h22543 = x__h22545 | y__h22546 ;
  assign x__h22545 = x__h22547 | y__h22548 ;
  assign x__h22547 =
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[3] |
	     y__h22550 ;
  assign x__h22617 = p__h21928[3] & p__h21928[2] ;
  assign x__h22684 = x__h22617 & p__h21928[1] ;
  assign x__h22774 = x__h22684 & p__h21928[0] ;
  assign x__h23810 =
	     mac_obj_unsignedmult_rg_s2_op_0[8] ^
	     mac_obj_unsignedmult_rg_s2_op_1[8] ;
  assign x__h23914 =
	     mac_obj_unsignedmult_rg_s2_op_0[8] &
	     mac_obj_unsignedmult_rg_s2_op_1[8] ;
  assign x__h24021 =
	     mac_obj_unsignedmult_rg_s2_op_0[9] ^
	     mac_obj_unsignedmult_rg_s2_op_1[9] ;
  assign x__h24124 =
	     mac_obj_unsignedmult_rg_s2_op_0[9] &
	     mac_obj_unsignedmult_rg_s2_op_1[9] ;
  assign x__h24231 =
	     mac_obj_unsignedmult_rg_s2_op_0[10] ^
	     mac_obj_unsignedmult_rg_s2_op_1[10] ;
  assign x__h24334 =
	     mac_obj_unsignedmult_rg_s2_op_0[10] &
	     mac_obj_unsignedmult_rg_s2_op_1[10] ;
  assign x__h24441 =
	     mac_obj_unsignedmult_rg_s2_op_0[11] ^
	     mac_obj_unsignedmult_rg_s2_op_1[11] ;
  assign x__h24544 =
	     mac_obj_unsignedmult_rg_s2_op_0[11] &
	     mac_obj_unsignedmult_rg_s2_op_1[11] ;
  assign x__h24651 =
	     mac_obj_unsignedmult_rg_s2_op_0[12] ^
	     mac_obj_unsignedmult_rg_s2_op_1[12] ;
  assign x__h24754 =
	     mac_obj_unsignedmult_rg_s2_op_0[12] &
	     mac_obj_unsignedmult_rg_s2_op_1[12] ;
  assign x__h26065 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[2] |
	     y__h26068 ;
  assign x__h26146 = p__h25890[2] & p__h25890[1] ;
  assign x__h26479 = x__h26481 | y__h26482 ;
  assign x__h26481 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[3] |
	     y__h26484 ;
  assign x__h26551 = p__h25890[3] & p__h25890[2] ;
  assign x__h26618 = x__h26551 & p__h25890[1] ;
  assign x__h27024 = x__h27026 | y__h27027 ;
  assign x__h27026 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[2] |
	     y__h27029 ;
  assign x__h27107 = p__h26853[2] & p__h26853[1] ;
  assign x__h27174 = x__h27107 & p__h26853[0] ;
  assign x__h27332 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[1] |
	     y__h27335 ;
  assign x__h27402 = p__h26853[1] & p__h26853[0] ;
  assign x__h27517 = x__h27519 | y__h27520 ;
  assign x__h27519 = x__h27521 | y__h27522 ;
  assign x__h27521 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[3] |
	     y__h27524 ;
  assign x__h27591 = p__h26853[3] & p__h26853[2] ;
  assign x__h27658 = x__h27591 & p__h26853[1] ;
  assign x__h27748 = x__h27658 & p__h26853[0] ;
  assign x__h28067 = x__h28069 | y__h28070 ;
  assign x__h28069 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[2] |
	     y__h28072 ;
  assign x__h28150 = p__h27896[2] & p__h27896[1] ;
  assign x__h28217 = x__h28150 & p__h27896[0] ;
  assign x__h28377 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[1] |
	     y__h28380 ;
  assign x__h28447 = p__h27896[1] & p__h27896[0] ;
  assign x__h28562 = x__h28564 | y__h28565 ;
  assign x__h28564 = x__h28566 | y__h28567 ;
  assign x__h28566 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[3] |
	     y__h28569 ;
  assign x__h28636 = p__h27896[3] & p__h27896[2] ;
  assign x__h28703 = x__h28636 & p__h27896[1] ;
  assign x__h28793 = x__h28703 & p__h27896[0] ;
  assign x__h29114 = x__h29116 | y__h29117 ;
  assign x__h29116 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564[2] |
	     y__h29119 ;
  assign x__h29195 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[2] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[1] ;
  assign x__h29259 =
	     x__h29195 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[0] ;
  assign x__h29417 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564[1] |
	     y__h29420 ;
  assign x__h29484 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[1] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[0] ;
  assign x__h30700 = mac_rg_A[14:7] + mac_rg_B[14:7] ;
  assign x__h32035 = { mac_rg_mult_s5[31], 31'd0 } ;
  assign x__h32089 = { mac_rg_C_s5[31], 31'd0 } ;
  assign x__h32148 =
	     { mac_rg_mult_s5[31],
	       (mac_rg_mult_s5[22:0] == 23'd0) ?
		 31'h7F800000 :
		 { 8'd255, mac_rg_mult_s5[22:0] } } ;
  assign x__h32391 =
	     { mac_rg_C_s5[31],
	       (mac_rg_C_s5[22:0] == 23'd0) ?
		 31'h7F800000 :
		 { 8'd255, mac_rg_C_s5[22:0] } } ;
  assign x__h32550 =
	     (mac_rg_C_s5[22:0] != 23'd0 || mac_rg_mult_s5[22:0] != 23'd0) ?
	       2'd1 :
	       2'd2 ;
  assign x__h32826 = { 1'b1, c_mant_s7__h32644 } ;
  assign x__h33408 = { mantissa__h33337, 1'b0 } ;
  assign x__h40065 = { mac_rg_mant_s8[25:0], 1'b0 } ;
  assign x__h40368 = mantissa__h33337[1] | mantissa__h33337[0] ;
  assign x__h40655 = x__h40674 | mac_rg_mant_s8[0] ;
  assign x__h40674 = mac_rg_mant_s8[2] | mac_rg_mant_s8[1] ;
  assign x__h40921 = mac_rg_mant_s8[1] | mac_rg_mant_s8[0] ;
  assign x__h46037 = sfdres__h43985 << x__h46070 ;
  assign x__h46070 =
	     10'd48 -
	     _898_MINUS_IF_as10_173_BITS_30_TO_23_174_EQ_0_1_ETC___d1251 ;
  assign x__h54130 =
	     as10_173_BITS_30_TO_23_174_EQ_255_175_AND_NOT__ETC___d1219 ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1552 :
	       _theResult___fst_sfd__h54093 ;
  assign x__h59472 =
	     as10_173_BITS_30_TO_23_174_EQ_255_175_AND_NOT__ETC___d1219 ?
	       IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AND_N_ETC___d1226 :
	       _theResult___fst_exp__h54092 ;
  assign x__h60777 =
	     IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THEN_89_ETC___d1612 -
	     IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1616 ;
  assign x__h60781 =
	     IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1616 -
	     IF_cs10_568_BITS_30_TO_23_569_EQ_0_609_THEN_89_ETC___d1612 ;
  assign x__h60841 = 8'd28 - diff__h43927 ;
  assign y__h10525 = {8{mac_obj_unsignedmult_rg_b[0]}} ;
  assign y__h10610 = {8{mac_obj_unsignedmult_rg_b[1]}} ;
  assign y__h10742 =
	     x__h10891 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[0] ;
  assign y__h10744 =
	     x__h10824 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[0] ;
  assign y__h10746 =
	     p__h10324[2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[1] ;
  assign y__h10992 = {8{mac_obj_unsignedmult_rg_b[2]}} ;
  assign y__h11055 =
	     x__h11124 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[0] ;
  assign y__h11057 =
	     p__h10324[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[0] ;
  assign y__h11180 =
	     p__h10324[0] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[0] ;
  assign y__h11240 =
	     x__h11470 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d79[0] ;
  assign y__h11242 =
	     x__h11380 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[0] ;
  assign y__h11244 =
	     x__h11313 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[1] ;
  assign y__h11246 =
	     p__h10324[3] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d127[2] ;
  assign y__h11733 = {8{mac_obj_unsignedmult_rg_b[4]}} ;
  assign y__h11817 = {8{mac_obj_unsignedmult_rg_b[3]}} ;
  assign y__h11934 = {8{mac_obj_unsignedmult_rg_b[5]}} ;
  assign y__h12131 =
	     x__h12276 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[7] ;
  assign y__h12133 =
	     x__h12212 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[0] ;
  assign y__h12135 =
	     x__h12170 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[1] ;
  assign y__h12381 =
	     x__h12447 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[7] ;
  assign y__h12383 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[0] ;
  assign y__h12501 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d86[0] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[7] ;
  assign y__h12561 =
	     x__h12781 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d96[7] ;
  assign y__h12563 =
	     x__h12695 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[0] ;
  assign y__h12565 =
	     x__h12631 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d82[1] ;
  assign y__h12567 =
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d66 &
	     x__h12134 ;
  assign y__h12979 = {8{mac_obj_unsignedmult_rg_b[7]}} ;
  assign y__h13636 =
	     x__h13785 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[0] ;
  assign y__h13638 =
	     x__h13718 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[0] ;
  assign y__h13640 =
	     p__h13466[2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[1] ;
  assign y__h13894 =
	     x__h13963 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[0] ;
  assign y__h13896 =
	     p__h13466[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[0] ;
  assign y__h14019 =
	     p__h13466[0] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[0] ;
  assign y__h14079 =
	     x__h14309 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d59[0] ;
  assign y__h14081 =
	     x__h14219 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[0] ;
  assign y__h14083 =
	     x__h14152 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[1] ;
  assign y__h14085 =
	     p__h13466[3] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d218[2] ;
  assign y__h14571 = {8{mac_obj_unsignedmult_rg_b[6]}} ;
  assign y__h14733 =
	     x__h14882 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[5] ;
  assign y__h14735 =
	     x__h14815 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[0] ;
  assign y__h14737 =
	     p__h14508[2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[1] ;
  assign y__h14991 =
	     x__h15060 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[5] ;
  assign y__h14993 =
	     p__h14508[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[0] ;
  assign y__h15116 =
	     p__h14508[0] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[5] ;
  assign y__h15176 =
	     x__h15406 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d63[5] ;
  assign y__h15178 =
	     x__h15316 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[0] ;
  assign y__h15180 =
	     x__h15249 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[1] ;
  assign y__h15182 =
	     p__h14508[3] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d175[2] ;
  assign y__h16124 =
	     x__h16273 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[6] ;
  assign y__h16126 =
	     x__h16206 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[0] ;
  assign y__h16128 =
	     p__h15954[2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[1] ;
  assign y__h16382 =
	     x__h16451 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[6] ;
  assign y__h16384 =
	     p__h15954[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[0] ;
  assign y__h16507 =
	     p__h15954[0] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[6] ;
  assign y__h16567 =
	     x__h16797 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d123[6] ;
  assign y__h16569 =
	     x__h16707 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[0] ;
  assign y__h16571 =
	     x__h16640 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[1] ;
  assign y__h16573 =
	     p__h15954[3] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d268[2] ;
  assign y__h17552 =
	     x__h17632 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[0] ;
  assign y__h17554 =
	     p__h17348[2] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[1] ;
  assign y__h17781 =
	     p__h17348[1] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[0] ;
  assign y__h17966 =
	     x__h18104 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[0] ;
  assign y__h17968 =
	     x__h18037 &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[1] ;
  assign y__h17970 =
	     p__h17348[3] &
	     mac_obj_unsignedmult_rg_a_0_AND_SEXT_mac_obj_u_ETC___d318[2] ;
  assign y__h19238 = x__h19387 & mac_obj_unsignedmult_rg_s1_op_2[3] ;
  assign y__h19240 =
	     x__h19320 &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[0] ;
  assign y__h19242 =
	     p__h19064[2] &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[1] ;
  assign y__h19498 = x__h19567 & mac_obj_unsignedmult_rg_s1_op_2[3] ;
  assign y__h19500 =
	     p__h19064[1] &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[0] ;
  assign y__h19623 = p__h19064[0] & mac_obj_unsignedmult_rg_s1_op_2[3] ;
  assign y__h19683 = x__h19913 & mac_obj_unsignedmult_rg_s1_op_2[3] ;
  assign y__h19685 =
	     x__h19823 &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[0] ;
  assign y__h19687 =
	     x__h19756 &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[1] ;
  assign y__h19689 =
	     p__h19064[3] &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_6_TO_3_ETC___d362[2] ;
  assign y__h20762 =
	     x__h20841 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[0] ;
  assign y__h20764 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413[0] &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[1] ;
  assign y__h20984 =
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d427[1] &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[0] ;
  assign y__h21162 =
	     x__h21294 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[0] ;
  assign y__h21164 =
	     x__h21230 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_6_TO_5_ETC___d423[1] ;
  assign y__h21166 =
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d413[1] &
	     mac_obj_unsignedmult_rg_s1_op_0_51_BITS_8_TO_7_ETC___d411[0] ;
  assign y__h22100 = x__h22249 & mac_obj_unsignedmult_rg_s1_op_4[7] ;
  assign y__h22102 =
	     x__h22182 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[0] ;
  assign y__h22104 =
	     p__h21928[2] &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[1] ;
  assign y__h22359 = x__h22428 & mac_obj_unsignedmult_rg_s1_op_4[7] ;
  assign y__h22361 =
	     p__h21928[1] &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[0] ;
  assign y__h22484 = p__h21928[0] & mac_obj_unsignedmult_rg_s1_op_4[7] ;
  assign y__h22544 = x__h22774 & mac_obj_unsignedmult_rg_s1_op_4[7] ;
  assign y__h22546 =
	     x__h22684 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[0] ;
  assign y__h22548 =
	     x__h22617 &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[1] ;
  assign y__h22550 =
	     p__h21928[3] &
	     mac_obj_unsignedmult_rg_s1_op_2_81_BITS_10_TO__ETC___d451[2] ;
  assign y__h23915 = x__h23810 & mac_obj_unsignedmult_rg_s2_op_2[8] ;
  assign y__h24125 = x__h24021 & mac_obj_unsignedmult_rg_s2_op_2[9] ;
  assign y__h24335 = x__h24231 & mac_obj_unsignedmult_rg_s2_op_2[10] ;
  assign y__h24545 = x__h24441 & mac_obj_unsignedmult_rg_s2_op_2[11] ;
  assign y__h24755 = x__h24651 & mac_obj_unsignedmult_rg_s2_op_2[12] ;
  assign y__h26066 =
	     x__h26146 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[0] ;
  assign y__h26068 =
	     p__h25890[2] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[1] ;
  assign y__h26295 =
	     p__h25890[1] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[0] ;
  assign y__h26480 =
	     x__h26618 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[0] ;
  assign y__h26482 =
	     x__h26551 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[1] ;
  assign y__h26484 =
	     p__h25890[3] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_3_TO_0_ETC___d622[2] ;
  assign y__h27025 = x__h27174 & IF_x6479_OR_y6480_THEN_1_ELSE_0__q1[0] ;
  assign y__h27027 =
	     x__h27107 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[0] ;
  assign y__h27029 =
	     p__h26853[2] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[1] ;
  assign y__h27333 = x__h27402 & IF_x6479_OR_y6480_THEN_1_ELSE_0__q1[0] ;
  assign y__h27335 =
	     p__h26853[1] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[0] ;
  assign y__h27458 = p__h26853[0] & IF_x6479_OR_y6480_THEN_1_ELSE_0__q1[0] ;
  assign y__h27518 = x__h27748 & IF_x6479_OR_y6480_THEN_1_ELSE_0__q1[0] ;
  assign y__h27520 =
	     x__h27658 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[0] ;
  assign y__h27522 =
	     x__h27591 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[1] ;
  assign y__h27524 =
	     p__h26853[3] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_7_TO_4_ETC___d601[2] ;
  assign y__h28068 = x__h28217 & cin__h27889 ;
  assign y__h28070 =
	     x__h28150 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[0] ;
  assign y__h28072 =
	     p__h27896[2] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[1] ;
  assign y__h28378 = x__h28447 & cin__h27889 ;
  assign y__h28380 =
	     p__h27896[1] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[0] ;
  assign y__h28503 = p__h27896[0] & cin__h27889 ;
  assign y__h28563 = x__h28793 & cin__h27889 ;
  assign y__h28565 =
	     x__h28703 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[0] ;
  assign y__h28567 =
	     x__h28636 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[1] ;
  assign y__h28569 =
	     p__h27896[3] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_11_TO__ETC___d580[2] ;
  assign y__h29115 = x__h29259 & cin__h28934 ;
  assign y__h29117 =
	     x__h29195 &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564[0] ;
  assign y__h29119 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[2] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564[1] ;
  assign y__h29418 = x__h29484 & cin__h28934 ;
  assign y__h29420 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[1] &
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d564[0] ;
  assign y__h29538 =
	     mac_obj_unsignedmult_rg_s3_op_0_60_BITS_14_TO__ETC___d566[0] &
	     cin__h28934 ;
  assign y_avValue_snd__h30365 =
	     (e__h30675 > 8'd1 && e__h30675 < 8'd254) ? e__h30675 : 8'd0 ;
  assign y_avValue_snd__h30381 =
	     (mac_rg_A[14:7] == 8'd255 || mac_rg_B[14:7] == 8'd255) ?
	       8'd255 :
	       y_avValue_snd__h30365 ;
  assign y_avValue_snd__h30397 =
	     (mac_rg_A[14:7] == 8'd0 || mac_rg_B[14:7] == 8'd0) ?
	       8'd0 :
	       y_avValue_snd__h30381 ;
  always@(grs_mul_round__h31347 or mant_1__h31341 or mantissa_round__h31580)
  begin
    case (grs_mul_round__h31347)
      3'b011, 3'b110, 3'b111:
	  IF_IF_IF_mac_obj_unsignedmult_rg_s5_val_53_THE_ETC___d778 =
	      mantissa_round__h31580;
      default: IF_IF_IF_mac_obj_unsignedmult_rg_s5_val_53_THE_ETC___d778 =
		   { 1'd0, mant_1__h31341 };
    endcase
  end
  always@(mac_rg_exception_s1)
  begin
    case (mac_rg_exception_s1)
      2'd1: CASE_mac_rg_exception_s1_1_0_2_255_255__q3 = 8'd0;
      2'd2: CASE_mac_rg_exception_s1_1_0_2_255_255__q3 = 8'd255;
      default: CASE_mac_rg_exception_s1_1_0_2_255_255__q3 = 8'd255;
    endcase
  end
  always@(mac_rg_exception_s1)
  begin
    case (mac_rg_exception_s1)
      2'd1, 2'd2: CASE_mac_rg_exception_s1_1_0_2_0_4194304__q4 = 23'd0;
      default: CASE_mac_rg_exception_s1_1_0_2_0_4194304__q4 = 23'd4194304;
    endcase
  end
  always@(guard__h45411 or out_sfd__h54077 or _theResult___sfd__h54074)
  begin
    case (guard__h45411)
      2'b10:
	  CASE_guard5411_0b10_out_sfd4077_0b11_theResult_ETC__q10 =
	      out_sfd__h54077;
      2'b11:
	  CASE_guard5411_0b10_out_sfd4077_0b11_theResult_ETC__q10 =
	      _theResult___sfd__h54074;
      default: CASE_guard5411_0b10_out_sfd4077_0b11_theResult_ETC__q10 =
		   23'd0;
    endcase
  end
  always@(guard__h45411 or out_exp__h54076 or _theResult___exp__h54073)
  begin
    case (guard__h45411)
      2'b10:
	  CASE_guard5411_0b10_out_exp4076_0b11_theResult_ETC__q11 =
	      out_exp__h54076;
      2'b11:
	  CASE_guard5411_0b10_out_exp4076_0b11_theResult_ETC__q11 =
	      _theResult___exp__h54073;
      default: CASE_guard5411_0b10_out_exp4076_0b11_theResult_ETC__q11 = 8'd0;
    endcase
  end
  always@(guard__h60181 or out_sfd__h65744 or _theResult___sfd__h65741)
  begin
    case (guard__h60181)
      2'b10:
	  CASE_guard0181_0b10_out_sfd5744_0b11_theResult_ETC__q17 =
	      out_sfd__h65744;
      2'b11:
	  CASE_guard0181_0b10_out_sfd5744_0b11_theResult_ETC__q17 =
	      _theResult___sfd__h65741;
      default: CASE_guard0181_0b10_out_sfd5744_0b11_theResult_ETC__q17 =
		   23'd0;
    endcase
  end
  always@(guard__h60181 or out_exp__h65743 or _theResult___exp__h65740)
  begin
    case (guard__h60181)
      2'b10:
	  CASE_guard0181_0b10_out_exp5743_0b11_theResult_ETC__q18 =
	      out_exp__h65743;
      2'b11:
	  CASE_guard0181_0b10_out_exp5743_0b11_theResult_ETC__q18 =
	      _theResult___exp__h65740;
      default: CASE_guard0181_0b10_out_exp5743_0b11_theResult_ETC__q18 = 8'd0;
    endcase
  end
  always@(guard__h45411 or
	  _theResult___snd_fst_sfd__h53501 or
	  IF_0b0_CONCAT_NOT_IF_NOT_as10_173_BITS_30_TO_2_ETC___d1936 or
	  IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1932)
  begin
    case (guard__h45411)
      2'b10:
	  IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1939 =
	      _theResult___snd_fst_sfd__h53501[0] ?
		IF_0b0_CONCAT_NOT_IF_NOT_as10_173_BITS_30_TO_2_ETC___d1936 :
		IF_IF_898_MINUS_IF_as10_173_BITS_30_TO_23_174__ETC___d1932;
      2'b11:
	  IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1939 =
	      IF_0b0_CONCAT_NOT_IF_NOT_as10_173_BITS_30_TO_2_ETC___d1936;
      default: IF_IF_NOT_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1939 =
		   31'd0;
    endcase
  end
  always@(guard__h60181 or
	  _theResult___snd_fst_sfd__h65188 or
	  IF_0b0_CONCAT_NOT_IF_NOT_IF_as10_173_BITS_30_T_ETC___d1955 or
	  IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1951)
  begin
    case (guard__h60181)
      2'b10:
	  IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1958 =
	      _theResult___snd_fst_sfd__h65188[0] ?
		IF_0b0_CONCAT_NOT_IF_NOT_IF_as10_173_BITS_30_T_ETC___d1955 :
		IF_IF_IF_NOT_IF_cs10_568_BITS_30_TO_23_569_EQ__ETC___d1951;
      2'b11:
	  IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1958 =
	      IF_0b0_CONCAT_NOT_IF_NOT_IF_as10_173_BITS_30_T_ETC___d1955;
      default: IF_IF_NOT_IF_as10_173_BITS_30_TO_23_174_EQ_255_ETC___d1958 =
		   31'd0;
    endcase
  end
  always@(grs__h41335 or
	  mac_rg_mant_s9 or
	  mac_rg_mant_s9_102_BITS_26_TO_4_103_PLUS_1___d1104)
  begin
    case (grs__h41335)
      3'b011, 3'b110, 3'b111:
	  CASE_grs1335_0b11_mac_rg_mant_s9_102_BITS_26_T_ETC__q19 =
	      mac_rg_mant_s9_102_BITS_26_TO_4_103_PLUS_1___d1104;
      default: CASE_grs1335_0b11_mac_rg_mant_s9_102_BITS_26_T_ETC__q19 =
		   mac_rg_mant_s9[26:4];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        as1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as10 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as11 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as12 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as3 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as4 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as5 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as6 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as7 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as8 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	as9 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs10 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs11 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs12 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs3 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs4 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs5 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs6 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs7 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs8 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	bs9 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cs1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs10 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs11 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs12 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs3 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs4 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs5 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs6 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs7 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs8 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	cs9 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	failed_cases <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mac_guard_bit_s9 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_obj_unsignedmult_rg_a <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_obj_unsignedmult_rg_b <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_obj_unsignedmult_rg_s1_op_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s1_op_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s1_op_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s1_op_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s1_op_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s1_val <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_obj_unsignedmult_rg_s2_op_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s2_op_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s2_op_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s2_val <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_obj_unsignedmult_rg_s3_op_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s3_op_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mac_obj_unsignedmult_rg_s3_val <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_obj_unsignedmult_rg_s4_op <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	mac_obj_unsignedmult_rg_s4_val <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_obj_unsignedmult_rg_s5_val <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_out <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_A <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	mac_rg_B <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	mac_rg_C <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s3 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s4 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s5 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s6 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_C_s7 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_exception_s1 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exception_s2 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exception_s3 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exception_s4 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exception_s6 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exception_s7 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exception_s8 <= `BSV_ASSIGNMENT_DELAY 2'h2;
	mac_rg_exp_add_s1 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exp_add_s2 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exp_add_s3 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exp_add_s4 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exp_diff_s6 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exp_diff_s7 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exponent_s8 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_exponent_s9 <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	mac_rg_mant_s8 <= `BSV_ASSIGNMENT_DELAY 28'hAAAAAAA;
	mac_rg_mant_s9 <= `BSV_ASSIGNMENT_DELAY 27'h2AAAAAA;
	mac_rg_mant_shift_s7 <= `BSV_ASSIGNMENT_DELAY 27'h2AAAAAA;
	mac_rg_mult_mant_s7 <= `BSV_ASSIGNMENT_DELAY 27'h2AAAAAA;
	mac_rg_mult_s5 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_mult_s6 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_mult_s7 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	mac_rg_out_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s10_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s3_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s4_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s5_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s6_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s7_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s8_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_s9_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_rg_sign_s1 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_rg_sign_s2 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_rg_sign_s3 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_rg_sign_s4 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_rg_sign_s8 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_rg_sign_s9 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_round_bit_s9 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	mac_sticky_bit_s9 <= `BSV_ASSIGNMENT_DELAY 1'h0;
	macs1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs10 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs3 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs4 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs5 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs6 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs7 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs8 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	macs9 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	rg_a <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	rg_af <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	rg_b <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	rg_bf <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	rg_c <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	rg_cf <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	rg_macf <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	rg_r <= `BSV_ASSIGNMENT_DELAY 1'b1;
      end
    else
      begin
        if (as1$EN) as1 <= `BSV_ASSIGNMENT_DELAY as1$D_IN;
	if (as10$EN) as10 <= `BSV_ASSIGNMENT_DELAY as10$D_IN;
	if (as11$EN) as11 <= `BSV_ASSIGNMENT_DELAY as11$D_IN;
	if (as12$EN) as12 <= `BSV_ASSIGNMENT_DELAY as12$D_IN;
	if (as2$EN) as2 <= `BSV_ASSIGNMENT_DELAY as2$D_IN;
	if (as3$EN) as3 <= `BSV_ASSIGNMENT_DELAY as3$D_IN;
	if (as4$EN) as4 <= `BSV_ASSIGNMENT_DELAY as4$D_IN;
	if (as5$EN) as5 <= `BSV_ASSIGNMENT_DELAY as5$D_IN;
	if (as6$EN) as6 <= `BSV_ASSIGNMENT_DELAY as6$D_IN;
	if (as7$EN) as7 <= `BSV_ASSIGNMENT_DELAY as7$D_IN;
	if (as8$EN) as8 <= `BSV_ASSIGNMENT_DELAY as8$D_IN;
	if (as9$EN) as9 <= `BSV_ASSIGNMENT_DELAY as9$D_IN;
	if (bs1$EN) bs1 <= `BSV_ASSIGNMENT_DELAY bs1$D_IN;
	if (bs10$EN) bs10 <= `BSV_ASSIGNMENT_DELAY bs10$D_IN;
	if (bs11$EN) bs11 <= `BSV_ASSIGNMENT_DELAY bs11$D_IN;
	if (bs12$EN) bs12 <= `BSV_ASSIGNMENT_DELAY bs12$D_IN;
	if (bs2$EN) bs2 <= `BSV_ASSIGNMENT_DELAY bs2$D_IN;
	if (bs3$EN) bs3 <= `BSV_ASSIGNMENT_DELAY bs3$D_IN;
	if (bs4$EN) bs4 <= `BSV_ASSIGNMENT_DELAY bs4$D_IN;
	if (bs5$EN) bs5 <= `BSV_ASSIGNMENT_DELAY bs5$D_IN;
	if (bs6$EN) bs6 <= `BSV_ASSIGNMENT_DELAY bs6$D_IN;
	if (bs7$EN) bs7 <= `BSV_ASSIGNMENT_DELAY bs7$D_IN;
	if (bs8$EN) bs8 <= `BSV_ASSIGNMENT_DELAY bs8$D_IN;
	if (bs9$EN) bs9 <= `BSV_ASSIGNMENT_DELAY bs9$D_IN;
	if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (cs1$EN) cs1 <= `BSV_ASSIGNMENT_DELAY cs1$D_IN;
	if (cs10$EN) cs10 <= `BSV_ASSIGNMENT_DELAY cs10$D_IN;
	if (cs11$EN) cs11 <= `BSV_ASSIGNMENT_DELAY cs11$D_IN;
	if (cs12$EN) cs12 <= `BSV_ASSIGNMENT_DELAY cs12$D_IN;
	if (cs2$EN) cs2 <= `BSV_ASSIGNMENT_DELAY cs2$D_IN;
	if (cs3$EN) cs3 <= `BSV_ASSIGNMENT_DELAY cs3$D_IN;
	if (cs4$EN) cs4 <= `BSV_ASSIGNMENT_DELAY cs4$D_IN;
	if (cs5$EN) cs5 <= `BSV_ASSIGNMENT_DELAY cs5$D_IN;
	if (cs6$EN) cs6 <= `BSV_ASSIGNMENT_DELAY cs6$D_IN;
	if (cs7$EN) cs7 <= `BSV_ASSIGNMENT_DELAY cs7$D_IN;
	if (cs8$EN) cs8 <= `BSV_ASSIGNMENT_DELAY cs8$D_IN;
	if (cs9$EN) cs9 <= `BSV_ASSIGNMENT_DELAY cs9$D_IN;
	if (failed_cases$EN)
	  failed_cases <= `BSV_ASSIGNMENT_DELAY failed_cases$D_IN;
	if (mac_guard_bit_s9$EN)
	  mac_guard_bit_s9 <= `BSV_ASSIGNMENT_DELAY mac_guard_bit_s9$D_IN;
	if (mac_obj_unsignedmult_rg_a$EN)
	  mac_obj_unsignedmult_rg_a <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_a$D_IN;
	if (mac_obj_unsignedmult_rg_b$EN)
	  mac_obj_unsignedmult_rg_b <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_b$D_IN;
	if (mac_obj_unsignedmult_rg_s1_op_0$EN)
	  mac_obj_unsignedmult_rg_s1_op_0 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s1_op_0$D_IN;
	if (mac_obj_unsignedmult_rg_s1_op_1$EN)
	  mac_obj_unsignedmult_rg_s1_op_1 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s1_op_1$D_IN;
	if (mac_obj_unsignedmult_rg_s1_op_2$EN)
	  mac_obj_unsignedmult_rg_s1_op_2 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s1_op_2$D_IN;
	if (mac_obj_unsignedmult_rg_s1_op_3$EN)
	  mac_obj_unsignedmult_rg_s1_op_3 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s1_op_3$D_IN;
	if (mac_obj_unsignedmult_rg_s1_op_4$EN)
	  mac_obj_unsignedmult_rg_s1_op_4 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s1_op_4$D_IN;
	if (mac_obj_unsignedmult_rg_s1_val$EN)
	  mac_obj_unsignedmult_rg_s1_val <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s1_val$D_IN;
	if (mac_obj_unsignedmult_rg_s2_op_0$EN)
	  mac_obj_unsignedmult_rg_s2_op_0 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s2_op_0$D_IN;
	if (mac_obj_unsignedmult_rg_s2_op_1$EN)
	  mac_obj_unsignedmult_rg_s2_op_1 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s2_op_1$D_IN;
	if (mac_obj_unsignedmult_rg_s2_op_2$EN)
	  mac_obj_unsignedmult_rg_s2_op_2 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s2_op_2$D_IN;
	if (mac_obj_unsignedmult_rg_s2_val$EN)
	  mac_obj_unsignedmult_rg_s2_val <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s2_val$D_IN;
	if (mac_obj_unsignedmult_rg_s3_op_0$EN)
	  mac_obj_unsignedmult_rg_s3_op_0 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s3_op_0$D_IN;
	if (mac_obj_unsignedmult_rg_s3_op_1$EN)
	  mac_obj_unsignedmult_rg_s3_op_1 <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s3_op_1$D_IN;
	if (mac_obj_unsignedmult_rg_s3_val$EN)
	  mac_obj_unsignedmult_rg_s3_val <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s3_val$D_IN;
	if (mac_obj_unsignedmult_rg_s4_op$EN)
	  mac_obj_unsignedmult_rg_s4_op <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s4_op$D_IN;
	if (mac_obj_unsignedmult_rg_s4_val$EN)
	  mac_obj_unsignedmult_rg_s4_val <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s4_val$D_IN;
	if (mac_obj_unsignedmult_rg_s5_val$EN)
	  mac_obj_unsignedmult_rg_s5_val <= `BSV_ASSIGNMENT_DELAY
	      mac_obj_unsignedmult_rg_s5_val$D_IN;
	if (mac_out$EN) mac_out <= `BSV_ASSIGNMENT_DELAY mac_out$D_IN;
	if (mac_rg_A$EN) mac_rg_A <= `BSV_ASSIGNMENT_DELAY mac_rg_A$D_IN;
	if (mac_rg_B$EN) mac_rg_B <= `BSV_ASSIGNMENT_DELAY mac_rg_B$D_IN;
	if (mac_rg_C$EN) mac_rg_C <= `BSV_ASSIGNMENT_DELAY mac_rg_C$D_IN;
	if (mac_rg_C_s1$EN)
	  mac_rg_C_s1 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s1$D_IN;
	if (mac_rg_C_s2$EN)
	  mac_rg_C_s2 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s2$D_IN;
	if (mac_rg_C_s3$EN)
	  mac_rg_C_s3 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s3$D_IN;
	if (mac_rg_C_s4$EN)
	  mac_rg_C_s4 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s4$D_IN;
	if (mac_rg_C_s5$EN)
	  mac_rg_C_s5 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s5$D_IN;
	if (mac_rg_C_s6$EN)
	  mac_rg_C_s6 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s6$D_IN;
	if (mac_rg_C_s7$EN)
	  mac_rg_C_s7 <= `BSV_ASSIGNMENT_DELAY mac_rg_C_s7$D_IN;
	if (mac_rg_exception_s1$EN)
	  mac_rg_exception_s1 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s1$D_IN;
	if (mac_rg_exception_s2$EN)
	  mac_rg_exception_s2 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s2$D_IN;
	if (mac_rg_exception_s3$EN)
	  mac_rg_exception_s3 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s3$D_IN;
	if (mac_rg_exception_s4$EN)
	  mac_rg_exception_s4 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s4$D_IN;
	if (mac_rg_exception_s6$EN)
	  mac_rg_exception_s6 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s6$D_IN;
	if (mac_rg_exception_s7$EN)
	  mac_rg_exception_s7 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s7$D_IN;
	if (mac_rg_exception_s8$EN)
	  mac_rg_exception_s8 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_exception_s8$D_IN;
	if (mac_rg_exp_add_s1$EN)
	  mac_rg_exp_add_s1 <= `BSV_ASSIGNMENT_DELAY mac_rg_exp_add_s1$D_IN;
	if (mac_rg_exp_add_s2$EN)
	  mac_rg_exp_add_s2 <= `BSV_ASSIGNMENT_DELAY mac_rg_exp_add_s2$D_IN;
	if (mac_rg_exp_add_s3$EN)
	  mac_rg_exp_add_s3 <= `BSV_ASSIGNMENT_DELAY mac_rg_exp_add_s3$D_IN;
	if (mac_rg_exp_add_s4$EN)
	  mac_rg_exp_add_s4 <= `BSV_ASSIGNMENT_DELAY mac_rg_exp_add_s4$D_IN;
	if (mac_rg_exp_diff_s6$EN)
	  mac_rg_exp_diff_s6 <= `BSV_ASSIGNMENT_DELAY mac_rg_exp_diff_s6$D_IN;
	if (mac_rg_exp_diff_s7$EN)
	  mac_rg_exp_diff_s7 <= `BSV_ASSIGNMENT_DELAY mac_rg_exp_diff_s7$D_IN;
	if (mac_rg_exponent_s8$EN)
	  mac_rg_exponent_s8 <= `BSV_ASSIGNMENT_DELAY mac_rg_exponent_s8$D_IN;
	if (mac_rg_exponent_s9$EN)
	  mac_rg_exponent_s9 <= `BSV_ASSIGNMENT_DELAY mac_rg_exponent_s9$D_IN;
	if (mac_rg_mant_s8$EN)
	  mac_rg_mant_s8 <= `BSV_ASSIGNMENT_DELAY mac_rg_mant_s8$D_IN;
	if (mac_rg_mant_s9$EN)
	  mac_rg_mant_s9 <= `BSV_ASSIGNMENT_DELAY mac_rg_mant_s9$D_IN;
	if (mac_rg_mant_shift_s7$EN)
	  mac_rg_mant_shift_s7 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_mant_shift_s7$D_IN;
	if (mac_rg_mult_mant_s7$EN)
	  mac_rg_mult_mant_s7 <= `BSV_ASSIGNMENT_DELAY
	      mac_rg_mult_mant_s7$D_IN;
	if (mac_rg_mult_s5$EN)
	  mac_rg_mult_s5 <= `BSV_ASSIGNMENT_DELAY mac_rg_mult_s5$D_IN;
	if (mac_rg_mult_s6$EN)
	  mac_rg_mult_s6 <= `BSV_ASSIGNMENT_DELAY mac_rg_mult_s6$D_IN;
	if (mac_rg_mult_s7$EN)
	  mac_rg_mult_s7 <= `BSV_ASSIGNMENT_DELAY mac_rg_mult_s7$D_IN;
	if (mac_rg_out_valid$EN)
	  mac_rg_out_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_out_valid$D_IN;
	if (mac_rg_s10_valid$EN)
	  mac_rg_s10_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s10_valid$D_IN;
	if (mac_rg_s1_valid$EN)
	  mac_rg_s1_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s1_valid$D_IN;
	if (mac_rg_s2_valid$EN)
	  mac_rg_s2_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s2_valid$D_IN;
	if (mac_rg_s3_valid$EN)
	  mac_rg_s3_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s3_valid$D_IN;
	if (mac_rg_s4_valid$EN)
	  mac_rg_s4_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s4_valid$D_IN;
	if (mac_rg_s5_valid$EN)
	  mac_rg_s5_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s5_valid$D_IN;
	if (mac_rg_s6_valid$EN)
	  mac_rg_s6_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s6_valid$D_IN;
	if (mac_rg_s7_valid$EN)
	  mac_rg_s7_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s7_valid$D_IN;
	if (mac_rg_s8_valid$EN)
	  mac_rg_s8_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s8_valid$D_IN;
	if (mac_rg_s9_valid$EN)
	  mac_rg_s9_valid <= `BSV_ASSIGNMENT_DELAY mac_rg_s9_valid$D_IN;
	if (mac_rg_sign_s1$EN)
	  mac_rg_sign_s1 <= `BSV_ASSIGNMENT_DELAY mac_rg_sign_s1$D_IN;
	if (mac_rg_sign_s2$EN)
	  mac_rg_sign_s2 <= `BSV_ASSIGNMENT_DELAY mac_rg_sign_s2$D_IN;
	if (mac_rg_sign_s3$EN)
	  mac_rg_sign_s3 <= `BSV_ASSIGNMENT_DELAY mac_rg_sign_s3$D_IN;
	if (mac_rg_sign_s4$EN)
	  mac_rg_sign_s4 <= `BSV_ASSIGNMENT_DELAY mac_rg_sign_s4$D_IN;
	if (mac_rg_sign_s8$EN)
	  mac_rg_sign_s8 <= `BSV_ASSIGNMENT_DELAY mac_rg_sign_s8$D_IN;
	if (mac_rg_sign_s9$EN)
	  mac_rg_sign_s9 <= `BSV_ASSIGNMENT_DELAY mac_rg_sign_s9$D_IN;
	if (mac_round_bit_s9$EN)
	  mac_round_bit_s9 <= `BSV_ASSIGNMENT_DELAY mac_round_bit_s9$D_IN;
	if (mac_sticky_bit_s9$EN)
	  mac_sticky_bit_s9 <= `BSV_ASSIGNMENT_DELAY mac_sticky_bit_s9$D_IN;
	if (macs1$EN) macs1 <= `BSV_ASSIGNMENT_DELAY macs1$D_IN;
	if (macs10$EN) macs10 <= `BSV_ASSIGNMENT_DELAY macs10$D_IN;
	if (macs2$EN) macs2 <= `BSV_ASSIGNMENT_DELAY macs2$D_IN;
	if (macs3$EN) macs3 <= `BSV_ASSIGNMENT_DELAY macs3$D_IN;
	if (macs4$EN) macs4 <= `BSV_ASSIGNMENT_DELAY macs4$D_IN;
	if (macs5$EN) macs5 <= `BSV_ASSIGNMENT_DELAY macs5$D_IN;
	if (macs6$EN) macs6 <= `BSV_ASSIGNMENT_DELAY macs6$D_IN;
	if (macs7$EN) macs7 <= `BSV_ASSIGNMENT_DELAY macs7$D_IN;
	if (macs8$EN) macs8 <= `BSV_ASSIGNMENT_DELAY macs8$D_IN;
	if (macs9$EN) macs9 <= `BSV_ASSIGNMENT_DELAY macs9$D_IN;
	if (rg_a$EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a$D_IN;
	if (rg_af$EN) rg_af <= `BSV_ASSIGNMENT_DELAY rg_af$D_IN;
	if (rg_b$EN) rg_b <= `BSV_ASSIGNMENT_DELAY rg_b$D_IN;
	if (rg_bf$EN) rg_bf <= `BSV_ASSIGNMENT_DELAY rg_bf$D_IN;
	if (rg_c$EN) rg_c <= `BSV_ASSIGNMENT_DELAY rg_c$D_IN;
	if (rg_cf$EN) rg_cf <= `BSV_ASSIGNMENT_DELAY rg_cf$D_IN;
	if (rg_macf$EN) rg_macf <= `BSV_ASSIGNMENT_DELAY rg_macf$D_IN;
	if (rg_r$EN) rg_r <= `BSV_ASSIGNMENT_DELAY rg_r$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    as1 = 32'hAAAAAAAA;
    as10 = 32'hAAAAAAAA;
    as11 = 32'hAAAAAAAA;
    as12 = 32'hAAAAAAAA;
    as2 = 32'hAAAAAAAA;
    as3 = 32'hAAAAAAAA;
    as4 = 32'hAAAAAAAA;
    as5 = 32'hAAAAAAAA;
    as6 = 32'hAAAAAAAA;
    as7 = 32'hAAAAAAAA;
    as8 = 32'hAAAAAAAA;
    as9 = 32'hAAAAAAAA;
    bs1 = 32'hAAAAAAAA;
    bs10 = 32'hAAAAAAAA;
    bs11 = 32'hAAAAAAAA;
    bs12 = 32'hAAAAAAAA;
    bs2 = 32'hAAAAAAAA;
    bs3 = 32'hAAAAAAAA;
    bs4 = 32'hAAAAAAAA;
    bs5 = 32'hAAAAAAAA;
    bs6 = 32'hAAAAAAAA;
    bs7 = 32'hAAAAAAAA;
    bs8 = 32'hAAAAAAAA;
    bs9 = 32'hAAAAAAAA;
    count = 32'hAAAAAAAA;
    cs1 = 32'hAAAAAAAA;
    cs10 = 32'hAAAAAAAA;
    cs11 = 32'hAAAAAAAA;
    cs12 = 32'hAAAAAAAA;
    cs2 = 32'hAAAAAAAA;
    cs3 = 32'hAAAAAAAA;
    cs4 = 32'hAAAAAAAA;
    cs5 = 32'hAAAAAAAA;
    cs6 = 32'hAAAAAAAA;
    cs7 = 32'hAAAAAAAA;
    cs8 = 32'hAAAAAAAA;
    cs9 = 32'hAAAAAAAA;
    failed_cases = 32'hAAAAAAAA;
    mac_guard_bit_s9 = 1'h0;
    mac_obj_unsignedmult_rg_a = 8'hAA;
    mac_obj_unsignedmult_rg_b = 8'hAA;
    mac_obj_unsignedmult_rg_s1_op_0 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s1_op_1 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s1_op_2 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s1_op_3 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s1_op_4 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s1_val = 1'h0;
    mac_obj_unsignedmult_rg_s2_op_0 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s2_op_1 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s2_op_2 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s2_val = 1'h0;
    mac_obj_unsignedmult_rg_s3_op_0 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s3_op_1 = 16'hAAAA;
    mac_obj_unsignedmult_rg_s3_val = 1'h0;
    mac_obj_unsignedmult_rg_s4_op = 16'hAAAA;
    mac_obj_unsignedmult_rg_s4_val = 1'h0;
    mac_obj_unsignedmult_rg_s5_val = 1'h0;
    mac_out = 32'hAAAAAAAA;
    mac_rg_A = 16'hAAAA;
    mac_rg_B = 16'hAAAA;
    mac_rg_C = 32'hAAAAAAAA;
    mac_rg_C_s1 = 32'hAAAAAAAA;
    mac_rg_C_s2 = 32'hAAAAAAAA;
    mac_rg_C_s3 = 32'hAAAAAAAA;
    mac_rg_C_s4 = 32'hAAAAAAAA;
    mac_rg_C_s5 = 32'hAAAAAAAA;
    mac_rg_C_s6 = 32'hAAAAAAAA;
    mac_rg_C_s7 = 32'hAAAAAAAA;
    mac_rg_exception_s1 = 2'h2;
    mac_rg_exception_s2 = 2'h2;
    mac_rg_exception_s3 = 2'h2;
    mac_rg_exception_s4 = 2'h2;
    mac_rg_exception_s6 = 2'h2;
    mac_rg_exception_s7 = 2'h2;
    mac_rg_exception_s8 = 2'h2;
    mac_rg_exp_add_s1 = 8'hAA;
    mac_rg_exp_add_s2 = 8'hAA;
    mac_rg_exp_add_s3 = 8'hAA;
    mac_rg_exp_add_s4 = 8'hAA;
    mac_rg_exp_diff_s6 = 8'hAA;
    mac_rg_exp_diff_s7 = 8'hAA;
    mac_rg_exponent_s8 = 8'hAA;
    mac_rg_exponent_s9 = 8'hAA;
    mac_rg_mant_s8 = 28'hAAAAAAA;
    mac_rg_mant_s9 = 27'h2AAAAAA;
    mac_rg_mant_shift_s7 = 27'h2AAAAAA;
    mac_rg_mult_mant_s7 = 27'h2AAAAAA;
    mac_rg_mult_s5 = 32'hAAAAAAAA;
    mac_rg_mult_s6 = 32'hAAAAAAAA;
    mac_rg_mult_s7 = 32'hAAAAAAAA;
    mac_rg_out_valid = 1'h0;
    mac_rg_s10_valid = 1'h0;
    mac_rg_s1_valid = 1'h0;
    mac_rg_s2_valid = 1'h0;
    mac_rg_s3_valid = 1'h0;
    mac_rg_s4_valid = 1'h0;
    mac_rg_s5_valid = 1'h0;
    mac_rg_s6_valid = 1'h0;
    mac_rg_s7_valid = 1'h0;
    mac_rg_s8_valid = 1'h0;
    mac_rg_s9_valid = 1'h0;
    mac_rg_sign_s1 = 1'h0;
    mac_rg_sign_s2 = 1'h0;
    mac_rg_sign_s3 = 1'h0;
    mac_rg_sign_s4 = 1'h0;
    mac_rg_sign_s8 = 1'h0;
    mac_rg_sign_s9 = 1'h0;
    mac_round_bit_s9 = 1'h0;
    mac_sticky_bit_s9 = 1'h0;
    macs1 = 32'hAAAAAAAA;
    macs10 = 32'hAAAAAAAA;
    macs2 = 32'hAAAAAAAA;
    macs3 = 32'hAAAAAAAA;
    macs4 = 32'hAAAAAAAA;
    macs5 = 32'hAAAAAAAA;
    macs6 = 32'hAAAAAAAA;
    macs7 = 32'hAAAAAAAA;
    macs8 = 32'hAAAAAAAA;
    macs9 = 32'hAAAAAAAA;
    rg_a = 16'hAAAA;
    rg_af = 32'hAAAAAAAA;
    rg_b = 16'hAAAA;
    rg_bf = 32'hAAAAAAAA;
    rg_c = 32'hAAAAAAAA;
    rg_cf = 32'hAAAAAAAA;
    rg_macf = 32'hAAAAAAAA;
    rg_r = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_IF_mac_rg_out_valid_159_THEN_mac_out_160_E_ETC___d1166)
	$display("%d --Expected O/P --- %b, Actual O/P-- %b",
		 $signed(count),
		 { NOT_IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_17_ETC___d1905 &&
		   IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1918,
		   IF_IF_as10_173_BITS_30_TO_23_174_EQ_255_175_AN_ETC___d1960 },
		 mac_result__h43647);
    if (RST_N != `BSV_RESET_VALUE)
      if (count == 32'd1011)
	$display("Failed for %d cases", $signed(failed_cases));
    if (RST_N != `BSV_RESET_VALUE) if (count == 32'd1011) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mk_Tb

